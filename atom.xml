<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>彭贻豪的博客</title>
  <subtitle>Leo&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-04-07T11:48:53.689Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>彭贻豪</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HNOI2015解题报告</title>
    <link href="http://yoursite.com/2017/04/07/HNOI2015%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/04/07/HNOI2015总结/</id>
    <published>2017-04-07T11:06:07.000Z</published>
    <updated>2017-04-07T11:48:53.689Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hnoi2015解题报告">HNOI2015解题报告</h2>
<h4 id="author-pengyihao">Author: Pengyihao</h4>
<a id="more"></a>
<hr>
<h3 id="day1-t1-亚瑟王">Day1 T1 亚瑟王</h3>
<hr>
<h4 id="思路">思路</h4>
<p>用 <span class="math inline">\(f[i][j]\)</span> 表示 <span class="math inline">\(i\)</span> 一共获得了 <span class="math inline">\(j\)</span> 次“机会”的概率。</p>
<p>注意这里的“机会”，是指有多少轮中，它前面的所有卡牌，要么在之前的轮中发动过，要么在这一轮中因为运气没有发动。</p>
<p>这里的“机会”不与自己有没有发动相关。所以就算在之前某轮中发动过，这一轮轮到它的时候贡献依然要增加。</p>
<p>于是有 <span class="math inline">\(f[i][j] = f[i-1][j+1]\cdot (1-(1-p[i-1])^j) + f[i-1][j]\cdot (1-p[i-1])^j\)</span></p>
<p><span class="math inline">\(ans = \sum_{i=1}^n\sum_{j=1}^rf[i][j]\cdot d[i]\cdot (1-(1-p[i])^j)\)</span></p>
<hr>
<h4 id="代码">代码</h4>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, a, b) for (int i = (a), i##_END_ = (b); i &lt;= i##_END_; i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DNF(i, a, b) for (int i = (a), i##_END_ = (b); i &gt;= i##_END_; i--)</span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function"><span class="keyword">void</span> <span class="title">in</span><span class="params">(Tp &amp;x)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> ch = getchar(); x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Min</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Max</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmax</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : x=y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmin</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : x=y;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">230</span>, MAXR = <span class="number">140</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> T, n, r, d[MAXN];</div><div class="line"><span class="keyword">double</span> p[MAXN], f[MAXN][MAXR];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">power</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">double</span> ret = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (y) &#123;</div><div class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) ret *= x;</div><div class="line">        x *= x;</div><div class="line">        y &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    freopen(<span class="string">"arthur.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"arthur.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    </div><div class="line">    in(T);</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        in(n); in(r);</div><div class="line"></div><div class="line">        FOR(i, <span class="number">1</span>, n) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;p[i]); in(d[i]);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span> f);</div><div class="line">        </div><div class="line">        f[<span class="number">1</span>][r] = <span class="number">1</span>;</div><div class="line">        </div><div class="line">        FOR(i, <span class="number">2</span>, n) FOR(j, <span class="number">1</span>, r) &#123;</div><div class="line">            f[i][j] = <span class="number">0</span>;</div><div class="line">            f[i][j] += f[i - <span class="number">1</span>][j + <span class="number">1</span>] * (<span class="number">1</span> - power(<span class="number">1</span> - p[i - <span class="number">1</span>], j + <span class="number">1</span>));</div><div class="line">            f[i][j] += f[i - <span class="number">1</span>][j]     * power(<span class="number">1</span> - p[i - <span class="number">1</span>], j);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">double</span> ans = <span class="number">0</span>;</div><div class="line"></div><div class="line">        FOR(i, <span class="number">1</span>, n) FOR(j, <span class="number">1</span>, r) &#123;</div><div class="line">            ans += f[i][j] * (<span class="number">1</span> - power(<span class="number">1</span> - p[i], j)) * d[i];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%.10lf\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="day1-t2-接水果">Day1 T2 接水果</h3>
<hr>
<h4 id="思路-1">思路</h4>
<p>首先，我们求出每个点的dfs序。</p>
<p>然后对于一条x&lt;–&gt;y的路径，如果有路径包含它，那么有</p>
<ol style="list-style-type: decimal">
<li><p>如果 <span class="math inline">\(lca(x,y)=x or y\)</span>，那么只需要这条路径的一个端点在深度大的点的子树中，另一个端点不在“深度小的点往深度大的点的方向上的第一个点”的子树中即可。</p></li>
<li><p>否则，那么只需要这条路径的两个端点分别在 <span class="math inline">\(x\)</span> 和 <span class="math inline">\(y\)</span> 的子树中即可。</p></li>
</ol>
<p>我们令这条包含x&lt;–&gt;y的路径的两个端点中dfs序小的点为 <span class="math inline">\(a\)</span>，dfs序大的点为 <span class="math inline">\(b\)</span>。</p>
<p>对于上面两种情况中的任意一种情况，这种情况中 <span class="math inline">\(a\)</span> 和 <span class="math inline">\(b\)</span> 所在的子树互不相交，为两个不相交的dfs序区间（<strong>不在子树中</strong>的情况我们可以转化为<strong>在它的补集的区间</strong>的情况）。</p>
<p>于是我们就把问题转化为了，每个盘子对应一对（或两对，因为有“不在子树”）区间，然后对于每个水果的两个点，两个区间分别包含其两个点的盘子中，权值第 <span class="math inline">\(k\)</span> 小的。</p>
<p>我们可以把一维转化成 <span class="math inline">\(x\)</span> 坐标，另一维转化成 <span class="math inline">\(y\)</span> 坐标，于是问题就转化为了包含一个点的矩形中第 <span class="math inline">\(k\)</span> 小的。</p>
<p>于是可以用扫描线+树状数组套主席树解决。</p>
<hr>
<h4 id="代码-1">代码</h4>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">map</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, a, b) for (int i = (a), i##_END_ = (b); i &lt;= i##_END_; i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DNF(i, a, b) for (int i = (a), i##_END_ = (b); i &gt;= i##_END_; i--)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(...) fprintf(stderr, __VA_ARGS__)</span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function"><span class="keyword">void</span> <span class="title">in</span><span class="params">(Tp &amp;x)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> ch = getchar(); x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Min</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Max</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmax</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : x=y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmin</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : x=y;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">100010</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> appear = <span class="number">0</span>, disappear = <span class="number">2</span>, query = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, p, q, ev_tot;</div><div class="line"><span class="keyword">int</span> cnt, head[MAXN], data[MAXN &lt;&lt; <span class="number">1</span>], nxt[MAXN &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> INDEX, dfn[MAXN], ed[MAXN], depth[MAXN];</div><div class="line"></div><div class="line"><span class="keyword">int</span> anc[MAXN][<span class="number">18</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> ans[MAXN];</div><div class="line"></div><div class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;M; <span class="keyword">int</span> M_point, to[MAXN &lt;&lt; <span class="number">3</span>];</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Event &#123;</div><div class="line">    <span class="keyword">int</span> type, num;</div><div class="line">    <span class="keyword">int</span> time, l, r, w;</div><div class="line">&#125; ev[MAXN &lt;&lt; <span class="number">3</span>];</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> segment_tree</div><div class="line">&#123;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXS = MAXN * <span class="number">250</span>;</div><div class="line">    <span class="keyword">int</span> seg_tot = <span class="number">0</span>, rot[MAXN], sz[MAXS], ch[MAXS][<span class="number">2</span>];</div><div class="line"></div><div class="line">    <span class="keyword">int</span> should_remove[<span class="number">250</span>], should_add[<span class="number">250</span>];</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> &amp;now, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></div><div class="line">    &#123;</div><div class="line">        now = ++seg_tot;</div><div class="line">        <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">        build(ch[now][<span class="number">0</span>], l, mid);</div><div class="line">        build(ch[now][<span class="number">1</span>], mid + <span class="number">1</span>, r);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        build(rot[<span class="number">0</span>], <span class="number">1</span>, M_point);</div><div class="line">        FOR(i, <span class="number">1</span>, n) rot[i] = rot[<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> &amp;now, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, <span class="keyword">int</span> modi)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> tmp = now;</div><div class="line">         now = ++seg_tot;</div><div class="line"></div><div class="line">        sz[now] = sz[tmp];</div><div class="line">        ch[now][<span class="number">0</span>] = ch[tmp][<span class="number">0</span>];</div><div class="line">        ch[now][<span class="number">1</span>] = ch[tmp][<span class="number">1</span>];</div><div class="line">        </div><div class="line">        sz[now] += modi;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (x &lt;= mid) push(ch[now][<span class="number">0</span>], l, mid, x, modi);</div><div class="line">        <span class="keyword">else</span> push(ch[now][<span class="number">1</span>], mid + <span class="number">1</span>, r, x, modi);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getdown</span><span class="params">(<span class="keyword">int</span> &amp;ret, <span class="keyword">bool</span> t)</span></span></div><div class="line">    &#123;</div><div class="line">        ret = <span class="number">0</span>;</div><div class="line">        FOR(i, <span class="number">1</span>, should_add[<span class="number">0</span>]) ret += sz[ch[should_add[i]][t]];</div><div class="line">        FOR(i, <span class="number">1</span>, should_remove[<span class="number">0</span>]) ret -= sz[ch[should_remove[i]][t]];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">godown</span><span class="params">(<span class="keyword">bool</span> t)</span></span></div><div class="line">    &#123;</div><div class="line">        FOR(i, <span class="number">1</span>, should_add[<span class="number">0</span>]) should_add[i] = ch[should_add[i]][t];</div><div class="line">        FOR(i, <span class="number">1</span>, should_remove[<span class="number">0</span>]) should_remove[i] = ch[should_remove[i]][t];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">void</span> _query(<span class="keyword">int</span> w, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> num)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (l == r) &#123;</div><div class="line">            ans[num] = l;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> ldata; getdown(ldata, <span class="number">0</span>);</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (ldata &gt;= w) &#123;godown(<span class="number">0</span>); _query(w, l, mid, num);&#125;</div><div class="line">        <span class="keyword">else</span> &#123;godown(<span class="number">1</span>); _query(w - ldata, mid + <span class="number">1</span>, r, num);&#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> w)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (l &gt; r) &#123;</div><div class="line">            debug(<span class="string">"WA"</span>);</div><div class="line">        &#125; <span class="comment">//This line is for gdb</span></div><div class="line">        <span class="keyword">while</span> (l &lt;= n) &#123;</div><div class="line">            push(rot[l], <span class="number">1</span>, M_point, w, <span class="number">1</span>);</div><div class="line">            l += l &amp; -l;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        r++;</div><div class="line">        <span class="keyword">while</span> (r &lt;= n) &#123;</div><div class="line">            push(rot[r], <span class="number">1</span>, M_point, w, <span class="number">-1</span>);</div><div class="line">            r += r &amp; -r;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> w)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">while</span> (l &lt;= n) &#123;</div><div class="line">            push(rot[l], <span class="number">1</span>, M_point, w, <span class="number">-1</span>);</div><div class="line">            l += l &amp; -l;</div><div class="line">        &#125;</div><div class="line">        r++;</div><div class="line">        <span class="keyword">while</span> (r &lt;= n) &#123;</div><div class="line">            push(rot[r], <span class="number">1</span>, M_point, w, <span class="number">1</span>);</div><div class="line">            r += r &amp; -r;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> w, <span class="keyword">int</span> num)</span></span></div><div class="line">    &#123;</div><div class="line">        l--;</div><div class="line">        should_remove[<span class="number">0</span>] = should_add[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (l) &#123;</div><div class="line">            should_remove[++should_remove[<span class="number">0</span>]] = rot[l];</div><div class="line">            l -= l &amp; -l;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span> (r) &#123;</div><div class="line">            should_add[++should_add[<span class="number">0</span>]] = rot[r];</div><div class="line">            r -= r &amp; -r;</div><div class="line">        &#125;</div><div class="line">        _query(w, <span class="number">1</span>, M_point, num);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (depth[x] &lt; depth[y]) x ^= y ^= x ^= y;</div><div class="line">    <span class="keyword">if</span> (depth[x] != depth[y]) &#123;</div><div class="line">        <span class="keyword">int</span> delta = depth[x] - depth[y];</div><div class="line">        DNF(i, <span class="number">17</span>, <span class="number">0</span>) <span class="keyword">if</span> (delta &gt;&gt; i &amp; <span class="number">1</span>) x = anc[x][i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (x == y) <span class="keyword">return</span> x;</div><div class="line">    DNF(i, <span class="number">17</span>, <span class="number">0</span>) <span class="keyword">if</span> (anc[x][i] &amp;&amp; anc[y][i] &amp;&amp; anc[x][i] != anc[y][i]) &#123;</div><div class="line">        x = anc[x][i]; y = anc[y][i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> anc[x][<span class="number">0</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> now)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (ev[now].type == appear) &#123;</div><div class="line">        segment_tree::insert(ev[now].l, ev[now].r, ev[now].w);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ev[now].type == disappear) &#123;</div><div class="line">        segment_tree::remove(ev[now].l, ev[now].r, ev[now].w);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        segment_tree::query(<span class="number">1</span>, ev[now].l, ev[now].w, ev[now].num);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Event &amp;a, <span class="keyword">const</span> Event &amp;b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> a.time &lt; b.time || a.time == b.time &amp;&amp; a.type &lt; b.type;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(<span class="keyword">const</span> Event &amp;a, <span class="keyword">const</span> Event &amp;b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> a.w &lt; b.w;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line">&#123;</div><div class="line">    nxt[cnt] = head[x]; data[cnt] = y; head[x] = cnt++;</div><div class="line">    nxt[cnt] = head[y]; data[cnt] = x; head[y] = cnt++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> pa)</span></span></div><div class="line">&#123;</div><div class="line">    depth[now] = depth[pa] + <span class="number">1</span>;</div><div class="line">    </div><div class="line">    anc[now][<span class="number">0</span>] = pa;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; anc[now][i - <span class="number">1</span>]; i++)</div><div class="line">        anc[now][i] = anc[anc[now][i - <span class="number">1</span>]][i - <span class="number">1</span>];</div><div class="line"></div><div class="line">    dfn[now] = ++INDEX;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[now]; i != <span class="number">-1</span>; i = nxt[i]) &#123;</div><div class="line">        <span class="keyword">if</span> (data[i] != pa) dfs(data[i], now);</div><div class="line">    &#125;</div><div class="line">    ed[now] = INDEX;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_fa</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> depth)</span></span></div><div class="line">&#123;</div><div class="line">    FOR(i, <span class="number">0</span>, <span class="number">17</span>) <span class="keyword">if</span> (depth &gt;&gt; i &amp; <span class="number">1</span>) now = anc[now][i];</div><div class="line">    <span class="keyword">return</span> now;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    freopen(<span class="string">"fruit.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"fruit.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    </div><div class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</div><div class="line">    </div><div class="line">    in(n); in(p); in(q);</div><div class="line"></div><div class="line">    FOR(i, <span class="number">1</span>, n - <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">int</span> u, v; in(u); in(v); add(u, v);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line">    FOR(i, <span class="number">1</span>, p) &#123;</div><div class="line">        <span class="keyword">int</span> u, v, w;</div><div class="line">        in(u); in(v); in(w);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> anc = lca(u, v);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (dfn[u] &gt; dfn[v]) u ^= v ^= u ^= v;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (u == anc) &#123;</div><div class="line">            <span class="keyword">int</span> nodes = find_fa(v, depth[v] - depth[u] - <span class="number">1</span>);</div><div class="line">            <span class="keyword">int</span> ss = dfn[nodes], tt = ed[nodes];</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (ss != <span class="number">1</span>) &#123;</div><div class="line">                ev[++ev_tot].time = <span class="number">1</span>;</div><div class="line">                ev[ev_tot].l = dfn[v]; ev[ev_tot].r = ed[v];</div><div class="line">                ev[ev_tot].type = appear; ev[ev_tot].w = w;</div><div class="line"></div><div class="line">                ev[++ev_tot].time = ss - <span class="number">1</span>;</div><div class="line">                ev[ev_tot].l = dfn[v]; ev[ev_tot].r = ed[v];</div><div class="line">                ev[ev_tot].type = disappear; ev[ev_tot].w = w;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (tt != n) &#123;</div><div class="line">                ev[++ev_tot].time = dfn[v];</div><div class="line">                ev[ev_tot].l = tt + <span class="number">1</span>; ev[ev_tot].r = n;</div><div class="line">                ev[ev_tot].type = appear; ev[ev_tot].w = w;</div><div class="line"></div><div class="line">                ev[++ev_tot].time = ed[v];</div><div class="line">                ev[ev_tot].l = tt + <span class="number">1</span>; ev[ev_tot].r = n;</div><div class="line">                ev[ev_tot].type = disappear; ev[ev_tot].w = w;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            ev[++ev_tot].time = dfn[u]; ev[ev_tot].l = dfn[v];</div><div class="line">            ev[ev_tot].r = ed[v]; ev[ev_tot].type = appear; ev[ev_tot].w = w;</div><div class="line">            ev[++ev_tot].time = ed[u]; ev[ev_tot].l = dfn[v];</div><div class="line">            ev[ev_tot].r = ed[v]; ev[ev_tot].type = disappear; ev[ev_tot].w = w;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">std</span>::sort(ev + <span class="number">1</span>, ev + ev_tot + <span class="number">1</span>, cmp2);</div><div class="line"></div><div class="line">    FOR(i, <span class="number">1</span>, ev_tot) &#123;</div><div class="line">        <span class="keyword">if</span> (i != <span class="number">1</span> &amp;&amp; ev[i].w == ev[i - <span class="number">1</span>].w) <span class="keyword">continue</span>;</div><div class="line">        M[ev[i].w] = ++M_point;</div><div class="line">        to[M_point] = ev[i].w;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    FOR(i, <span class="number">1</span>, ev_tot) &#123;</div><div class="line">        ev[i].w = M[ev[i].w];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    FOR(i, <span class="number">1</span>, q) &#123;</div><div class="line">        <span class="keyword">int</span> u, v, w;</div><div class="line">        in(u); in(v); in(w);</div><div class="line">        <span class="keyword">if</span> (dfn[u] &gt; dfn[v]) u ^= v ^= u ^= v;</div><div class="line">        </div><div class="line">        ev[++ev_tot].time = dfn[u];</div><div class="line">        ev[ev_tot].l = dfn[v]; ev[ev_tot].w = w;</div><div class="line">        ev[ev_tot].num = i; ev[ev_tot].type = query;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">std</span>::sort(ev + <span class="number">1</span>, ev + ev_tot + <span class="number">1</span>, cmp);</div><div class="line"></div><div class="line">    segment_tree::initialize();</div><div class="line">    </div><div class="line">    FOR(i, <span class="number">1</span>, ev_tot) work(i);</div><div class="line">    </div><div class="line">    FOR(i, <span class="number">1</span>, q) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, to[ans[i]]);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="day1-t3-菜肴制作">Day1 T3 菜肴制作</h3>
<hr>
<h4 id="思路-2">思路</h4>
<p>按照逆序拓扑排序，然后构造字典序最大的解。</p>
<hr>
<h4 id="代码-2">代码</h4>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="built_in">std</span>::priority_queue;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, a, b) for (int i = (a), i##_END_ = (b); i &lt;= i##_END_; i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DNF(i, a, b) for (int i = (a), i##_END_ = (b); i &gt;= i##_END_; i--)</span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function"><span class="keyword">void</span> <span class="title">in</span><span class="params">(Tp &amp;x)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> ch = getchar(); x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Min</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Max</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmax</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : x=y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmin</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : x=y;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">100010</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> T, n, m, chose, du[MAXN], order[MAXN];</div><div class="line"></div><div class="line"><span class="keyword">int</span> cnt, head[MAXN], data[MAXN &lt;&lt; <span class="number">1</span>], nxt[MAXN &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line">priority_queue&lt;<span class="keyword">int</span>&gt;q;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line">&#123;</div><div class="line">    nxt[cnt] = head[x]; data[cnt] = y; head[x] = cnt++;</div><div class="line">    nxt[cnt] = head[y]; data[cnt] = x; head[y] = cnt++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    freopen(<span class="string">"dishes.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"dishes.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    </div><div class="line">    in(T);</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        <span class="built_in">memset</span>(du, <span class="number">0</span>, <span class="keyword">sizeof</span> du);</div><div class="line">        <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head); cnt = <span class="number">0</span>;</div><div class="line">        </div><div class="line">        in(n); in(m); chose = n;</div><div class="line">        </div><div class="line">        FOR(i, <span class="number">1</span>, m) &#123;</div><div class="line">            <span class="keyword">int</span> x, y; in(x); in(y); add(y, x);</div><div class="line">            du[x]++;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        FOR(i, <span class="number">1</span>, n) &#123;</div><div class="line">            <span class="keyword">if</span> (!du[i]) q.push(i);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        order[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span> (!q.empty()) &#123;</div><div class="line">            <span class="keyword">int</span> now = q.top(); q.pop(); chose--;</div><div class="line">            order[++order[<span class="number">0</span>]] = now;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = head[now]; i != <span class="number">-1</span>; i = nxt[i]) &#123;</div><div class="line">                du[data[i]]--;</div><div class="line">                <span class="keyword">if</span> (!du[data[i]]) &#123;</div><div class="line">                    q.push(data[i]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (chose) <span class="built_in">puts</span>(<span class="string">"Impossible!"</span>);</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            DNF(i, n, <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"%d "</span>, order[i]);</div><div class="line">            <span class="built_in">putchar</span>(<span class="number">10</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="day2-t1-落忆枫音">Day2 T1 落忆枫音</h3>
<hr>
<h4 id="思路-3">思路</h4>
<p>考虑没有环的情况。</p>
<p>每个点（除了 <span class="math inline">\(1\)</span> 号点）任选一条入边，则构成一棵脉络树。</p>
<p>所有方案数为 <span class="math inline">\(\prod_{i=2}^ndegree[i]\)</span></p>
<p>但是有环，所以答案要减去它。</p>
<p>设 <span class="math inline">\(S\)</span> 为 <span class="math inline">\(y\)</span> 到 <span class="math inline">\(x\)</span> 的路径。</p>
<p><span class="math inline">\(remove=\sum_{S}\prod_{i=2}^n[i\notin S]degree[i]\)</span></p>
<p>这个可以dp……</p>
<p>令 <span class="math inline">\(f[i]\)</span> 为 <span class="math inline">\(i\)</span> 到 <span class="math inline">\(x\)</span> 的路径求出的remove。</p>
<p>则 <span class="math inline">\(f[i] = \sum_{j-&gt;i}f[j]/degree[i]\)</span></p>
<hr>
<h4 id="代码-3">代码</h4>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">queue</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, a, b) for (LL i = (a), i##_END_ = (b); i &lt;= i##_END_; i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DNF(i, a, b) for (LL i = (a), i##_END_ = (b); i &gt;= i##_END_; i--)</span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function"><span class="keyword">void</span> <span class="title">in</span><span class="params">(Tp &amp;x)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> ch = getchar(); x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Min</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Max</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmax</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : x=y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmin</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : x=y;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> LL MOD = <span class="number">1000000007</span>;</div><div class="line"><span class="keyword">const</span> LL MAXN = <span class="number">200010</span>;</div><div class="line"></div><div class="line">LL n, m, x, y, ans = <span class="number">1</span>;</div><div class="line"></div><div class="line">LL f[MAXN], du[MAXN], rdu[MAXN];</div><div class="line">LL head[MAXN], data[MAXN], nxt[MAXN], cnt;</div><div class="line">LL head1[MAXN], data1[MAXN], nxt1[MAXN], cnt1;</div><div class="line"></div><div class="line"><span class="built_in">queue</span>&lt;LL&gt;q;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(LL x, LL y)</span></span></div><div class="line">&#123;</div><div class="line">    nxt[cnt] = head[x]; data[cnt] = y; head[x] = cnt++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add2</span><span class="params">(LL x, LL y)</span></span></div><div class="line">&#123;</div><div class="line">    nxt1[cnt1] = head1[x]; data1[cnt1] = y; head1[x] = cnt1++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">power</span><span class="params">(LL x, LL y)</span></span></div><div class="line">&#123;</div><div class="line">    LL ret = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (y) &#123;</div><div class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) ret = <span class="number">1l</span>l * ret * x % MOD;</div><div class="line">        x = <span class="number">1l</span>l * x * x % MOD;</div><div class="line">        y &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    freopen(<span class="string">"maple.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"maple.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    </div><div class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</div><div class="line">    <span class="built_in">memset</span>(head1, <span class="number">-1</span>, <span class="keyword">sizeof</span> head1);</div><div class="line">    </div><div class="line">    in(n); in(m); in(x); in(y);</div><div class="line">    </div><div class="line">    FOR(i, <span class="number">1</span>, m) &#123;</div><div class="line">        LL u, v;</div><div class="line">        in(u); in(v); add(u, v); add2(v, u);</div><div class="line">        du[v]++; rdu[v]++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    FOR(i, <span class="number">2</span>, n)</div><div class="line">        <span class="keyword">if</span> (i != y)</div><div class="line">            ans = <span class="number">1l</span>l * ans * du[i] % MOD;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (x == y || y == <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (y != <span class="number">1</span>)</div><div class="line">            ans = <span class="number">1l</span>l * ans * du[x] % MOD;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    LL tmp = ans;</div><div class="line">    ans = <span class="number">1l</span>l * ans * (du[y] + <span class="number">1</span>) % MOD;</div><div class="line"></div><div class="line">    FOR(i, <span class="number">1</span>, n) &#123;</div><div class="line">        <span class="keyword">if</span> (!du[i]) q.push(i);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</div><div class="line">        LL now = q.front(); q.pop();</div><div class="line">        <span class="keyword">if</span> (now == y) &#123;</div><div class="line">            f[now] = tmp;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            f[now] = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (LL i = head1[now]; i != <span class="number">-1</span>; i = nxt1[i]) &#123;</div><div class="line">                f[now] = (f[now] + f[data1[i]]) % MOD;</div><div class="line">            &#125;</div><div class="line">            f[now] = <span class="number">1l</span>l * f[now] * power(rdu[now], MOD - <span class="number">2</span>) % MOD;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (LL i = head[now]; i != <span class="number">-1</span>; i = nxt[i]) &#123;</div><div class="line">            du[data[i]]--;</div><div class="line">            <span class="keyword">if</span> (!du[data[i]]) &#123;</div><div class="line">                q.push(data[i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, (ans - f[x] + MOD) % MOD);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="day2-t2">Day2 T2</h3>
<hr>
<p>这是一道动态点分治的题目。但因为我还没有搞这个专题所以暂且跳过。</p>
<hr>
<h3 id="day2-t3">Day2 T3</h3>
<hr>
<h4 id="思路-4">思路</h4>
<p>这个题目还是很容易的。</p>
<p>因为所有的 <span class="math inline">\(x\)</span> 互不相同， 所以可以把大小关系看作是图论中的边。</p>
<p>那么构成的就是一座森林（把相等的点用并差集缩起来）。</p>
<p>然后就可以树形dp辣！</p>
<p>因为有等于，所以我们不知道每棵子树中有多少“块”元素。</p>
<p>我们把相等的元素看成一块，那么一棵子树就是若干个块的大小关系。</p>
<p>我们设第 <span class="math inline">\(i\)</span> 个点的子树中有 <span class="math inline">\(j\)</span> 个块的方案数为 <span class="math inline">\(f[i][j]\)</span>。</p>
<p>则两棵子树合并的结果 <span class="math inline">\(g[i]\)</span> 为</p>
<p><span class="math display">\[g[i]=\sum_{j=1}^n\sum_{k=1}^n[max(j, k)\leq i\leq j+k]f[son1][j]\cdot f[son2][j]\cdot \binom{i}{j}\binom{j}{j+k-i}\]</span></p>
<hr>
<h4 id="代码-4">代码</h4>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, a, b) for (int i = (a), i##_END_ = (b); i &lt;= i##_END_; i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DNF(i, a, b) for (int i = (a), i##_END_ = (b); i &gt;= i##_END_; i--)</span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function"><span class="keyword">void</span> <span class="title">in</span><span class="params">(Tp &amp;x)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> ch = getchar(); x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Min</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Max</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmax</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : x=y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmin</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : x=y;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1000000007</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Edge &#123;</div><div class="line">    <span class="keyword">int</span> l, r;</div><div class="line">&#125; edge[MAXN];</div><div class="line"></div><div class="line"><span class="keyword">int</span> edge_lenth;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">char</span> compare[<span class="number">10</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> du[MAXN], f[MAXN][MAXN];</div><div class="line"></div><div class="line"><span class="keyword">int</span> head[MAXN], nxt[MAXN], data[MAXN], cnt;</div><div class="line"></div><div class="line"><span class="keyword">int</span> fa[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> tmp = x, pre;</div><div class="line">    <span class="keyword">while</span> (tmp != fa[tmp]) tmp = fa[tmp];</div><div class="line">    <span class="keyword">while</span> (x != tmp) &#123;</div><div class="line">        pre = fa[x]; fa[x] = tmp; x = pre;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> tmp;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> fx = find(x), fy = find(y);</div><div class="line">    <span class="keyword">if</span> (fx != fy) fa[fx] = fy;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> g[MAXN], jie[MAXN], ni[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (!y) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (x &lt; y) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">1l</span>l * jie[x] * ni[y] % MOD * ni[x - y] % MOD;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[now]; i != <span class="number">-1</span>; i = nxt[i]) dfs(data[i]);</div><div class="line"></div><div class="line">    <span class="built_in">memset</span>(g, <span class="number">0</span>, <span class="keyword">sizeof</span> g);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (head[now] != <span class="number">-1</span>)</div><div class="line">        FOR(k, <span class="number">1</span>, n) g[k] = f[data[head[now]]][k];</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (head[now] != <span class="number">-1</span>) </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = nxt[head[now]]; i != <span class="number">-1</span>; i = nxt[i]) &#123;</div><div class="line">            <span class="built_in">memset</span>(f[now], <span class="number">0</span>, <span class="keyword">sizeof</span> f[now]);</div><div class="line">            FOR(k, <span class="number">1</span>, n) FOR(l, <span class="number">1</span>, n) FOR(j, Max(k, l), Min(n, k + l)) &#123;</div><div class="line">                f[now][j] =    (</div><div class="line">                    f[now][j] +</div><div class="line">                    <span class="number">1l</span>l * g[k] % MOD * f[data[i]][l] % MOD *</div><div class="line">                    C(j, k) % MOD * C(k, k + l - j) % MOD</div><div class="line">                ) % MOD;</div><div class="line">            &#125;</div><div class="line">            FOR(k, <span class="number">1</span>, n) g[k] = f[now][k];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (head[now] == <span class="number">-1</span>) f[now][<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">else</span> FOR(i, <span class="number">1</span>, n) f[now][i] = g[i - <span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">power</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (y) &#123;</div><div class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) ret = <span class="number">1l</span>l * ret * x % MOD;</div><div class="line">        x = <span class="number">1l</span>l * x * x % MOD;</div><div class="line">        y &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line">&#123;</div><div class="line">    nxt[cnt] = head[x]; data[cnt] = y; head[x] = cnt++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    freopen(<span class="string">"pairwise.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"pairwise.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    </div><div class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</div><div class="line">    </div><div class="line">    jie[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    FOR(i, <span class="number">1</span>, <span class="number">100</span>) jie[i] = <span class="number">1l</span>l * jie[i - <span class="number">1</span>] * i % MOD;</div><div class="line"></div><div class="line">    ni[<span class="number">100</span>] = power(jie[<span class="number">100</span>], MOD - <span class="number">2</span>);</div><div class="line">    DNF(i, <span class="number">99</span>, <span class="number">1</span>) ni[i] = <span class="number">1l</span>l * ni[i + <span class="number">1</span>] * (i + <span class="number">1</span>) % MOD;</div><div class="line"></div><div class="line">    ni[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line"></div><div class="line">    in(n); in(m);</div><div class="line"></div><div class="line">    FOR(i, <span class="number">1</span>, n) fa[i] = i;</div><div class="line"></div><div class="line">    FOR(i, <span class="number">1</span>, m) &#123;</div><div class="line">        <span class="keyword">int</span> x, y;</div><div class="line">        in(x); <span class="built_in">scanf</span>(<span class="string">"%s"</span>, compare); in(y);</div><div class="line">        <span class="keyword">if</span> (compare[<span class="number">0</span>] == <span class="string">'&lt;'</span>) &#123;</div><div class="line">            edge[++edge_lenth].l = x; edge[edge_lenth].r = y;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> merge(x, y);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line"></div><div class="line">    FOR(i, <span class="number">1</span>, edge_lenth) &#123;</div><div class="line">        <span class="keyword">int</span> fx = find(edge[i].l);</div><div class="line">        <span class="keyword">int</span> fy = find(edge[i].r);</div><div class="line">        <span class="keyword">if</span> (fx == fy) &#123;</div><div class="line">            <span class="built_in">puts</span>(<span class="string">"0"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        add(fx, fy); du[fy]++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> rot = <span class="number">0</span>;</div><div class="line"></div><div class="line">    FOR(i, <span class="number">1</span>, n) &#123;</div><div class="line">        <span class="keyword">if</span> (!du[find(i)]) rot = find(i);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!rot) &#123;</div><div class="line">        <span class="built_in">puts</span>(<span class="string">"0"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    dfs(rot);</div><div class="line"></div><div class="line">    FOR(i, <span class="number">1</span>, n) ans = (ans + f[rot][i]) % MOD;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;hnoi2015解题报告&quot;&gt;HNOI2015解题报告&lt;/h2&gt;
&lt;h4 id=&quot;author-pengyihao&quot;&gt;Author: Pengyihao&lt;/h4&gt;
    
    </summary>
    
      <category term="HNOI" scheme="http://yoursite.com/categories/HNOI/"/>
    
    
      <category term="HNOI" scheme="http://yoursite.com/tags/HNOI/"/>
    
  </entry>
  
  <entry>
    <title>test20170406总结</title>
    <link href="http://yoursite.com/2017/04/06/test20170406%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/04/06/test20170406总结/</id>
    <published>2017-04-06T06:12:56.000Z</published>
    <updated>2017-04-06T06:20:11.947Z</updated>
    
    <content type="html"><![CDATA[<h2 id="test20170406总结">test20170406总结</h2>
<p>做题顺序：T1-&gt;T2-&gt;T3-&gt;T1</p>
<a id="more"></a>
<hr>
<h4 id="t1">T1</h4>
<p>这个题目我想到了标算的一半，将 <span class="math inline">\(i^j\)</span> 转化成了 <span class="math inline">\(i\)</span> 只有不到 <span class="math inline">\(30\)</span> 而且是 <span class="math inline">\(i\cdot j\)</span> 的问题。</p>
<p>但是正解后面的部分我完全没有想法。</p>
<p>由于做这题的时候时间还很充裕，所以我想了N多错误做法，一一对拍卡掉，最后只能弃疗了。</p>
<p>关键是picks没有给我的这个部分分！！！</p>
<p>我可以做 <span class="math inline">\(n,m\leq 10^5\)</span> 的情况，但是picks的70分只有 <span class="math inline">\(n\leq 10^5\)</span>……</p>
<p>期望得分：40分。</p>
<p>实际得分：40分。</p>
<hr>
<h4 id="t2">T2</h4>
<p>发现这个题目构造的图就是一些不相交的环。</p>
<p>于是每个点只有一条出边、一条入边。</p>
<p>用 <span class="math inline">\(f[i][j]\)</span> 表示前 <span class="math inline">\(i\)</span> 个点往外连边之后，每个点是否有入边的状态是 <span class="math inline">\(j\)</span>，状压dp即可。</p>
<p>期望得分：60</p>
<p>实际得分：60分。</p>
<hr>
<h4 id="t3">T3</h4>
<p><span class="math inline">\(30\)</span> 分的暴力直接用高精度。</p>
<p>然后另外 <span class="math inline">\(30\)</span> 分的暴力直接模拟就好了。</p>
<p>期望得分：60</p>
<p>实际得分：60分。</p>
<hr>
<h3 id="总结">总结</h3>
<p>期望得分：160</p>
<p>实际得分：160……</p>
<p>今天对了拍，真是特别稳。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;test20170406总结&quot;&gt;test20170406总结&lt;/h2&gt;
&lt;p&gt;做题顺序：T1-&amp;gt;T2-&amp;gt;T3-&amp;gt;T1&lt;/p&gt;
    
    </summary>
    
      <category term="TEST" scheme="http://yoursite.com/categories/TEST/"/>
    
    
      <category term="TEST" scheme="http://yoursite.com/tags/TEST/"/>
    
  </entry>
  
  <entry>
    <title>HNOI2014解题报告</title>
    <link href="http://yoursite.com/2017/04/05/HNOI2014%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    <id>http://yoursite.com/2017/04/05/HNOI2014解题报告/</id>
    <published>2017-04-05T06:23:22.000Z</published>
    <updated>2017-04-07T11:06:38.827Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hnoi2014解题报告">HNOI2014解题报告</h2>
<h4 id="author-pengyihao">Author: Pengyihao</h4>
<a id="more"></a>
<hr>
<h3 id="day1-t1-画框">Day1 T1 画框</h3>
<hr>
<h4 id="思路">思路</h4>
<p>这个题目我其实是没有思路的。</p>
<p>网上说要用一种高深的最小乘积生成树的算法，我就学了一下。</p>
<p>我们把每一种搭配方案中，<span class="math inline">\(A\)</span> 的和记做 <span class="math inline">\(x\)</span>，<span class="math inline">\(B\)</span> 的和记做 <span class="math inline">\(y\)</span>。</p>
<p>那么一种搭配方案就可以看做一个坐标 <span class="math inline">\((x, y)\)</span>。</p>
<p>因为 <span class="math inline">\(disharmony = x\cdot y\)</span>，所以我们可以把 <span class="math inline">\(disharmony\)</span> 看作反比例函数的 <span class="math inline">\(k\)</span>。</p>
<p>因为反比例函数越靠近原点，<span class="math inline">\(k\)</span> 越小。</p>
<p>所以我们要 <span class="math inline">\((x, y)\)</span> 尽可能靠近原点。</p>
<p>找到 <span class="math inline">\(x\)</span> 最小的方案 <span class="math inline">\(l\)</span>，和 <span class="math inline">\(y\)</span> 最小的方案 <span class="math inline">\(r\)</span>，分别求出它们的坐标。</p>
<p><em>为什么大家都用KM算法，就我用费用流？好怕怕啊</em></p>
<p>然后我们就要找到在这两个方案的坐标的连线的下方，且三个方案形成的三角形面积最大的方案。</p>
<p>这个面积用叉积可以计算，最后发现形如 <span class="math inline">\(aA+bB\)</span>，其中 <span class="math inline">\(A, B\)</span> 是题目中的那个东西。</p>
<p>于是我们可以再跑一遍费用流求出这个方案 <span class="math inline">\(mid\)</span>。</p>
<p>递归处理 <span class="math inline">\((l, mid)\)</span> 和 <span class="math inline">\((mid, r)\)</span>。</p>
<p>边界就是 <span class="math inline">\(l == mid || mid == r\)</span>。</p>
<p>这个据说递归次数期望是 <span class="math inline">\(\sqrt{\ln n}\)</span>，然后复杂度就对了。</p>
<hr>
<h4 id="代码">代码</h4>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, a, b) for (LL i = (a), i##_END_ = (b); i &lt;= i##_END_; i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DNF(i, a, b) for (LL i = (a), i##_END_ = (b); i &gt;= i##_END_; i--)</span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function"><span class="keyword">void</span> <span class="title">in</span><span class="params">(Tp &amp;x)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> ch = getchar(); x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Min</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Max</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmax</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : x=y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmin</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : x=y;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> LL MAXN = <span class="number">80</span>;</div><div class="line"></div><div class="line">LL n, A[MAXN][MAXN], B[MAXN][MAXN], tmp[MAXN][MAXN];</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> KM</div><div class="line">&#123;</div><div class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">queue</span>; <span class="built_in">queue</span>&lt;LL&gt;q;</div><div class="line">    <span class="keyword">bool</span> in_stack[MAXN &lt;&lt; <span class="number">1</span>];</div><div class="line">    </div><div class="line">    <span class="keyword">const</span> LL ss = <span class="number">0</span>, tt = <span class="number">159</span>;</div><div class="line">    </div><div class="line">    LL cnt, ret1, ret2, dis[MAXN &lt;&lt; <span class="number">1</span>], pre[MAXN &lt;&lt; <span class="number">1</span>];</div><div class="line">    LL head[MAXN &lt;&lt; <span class="number">1</span>], data[MAXN * MAXN &lt;&lt; <span class="number">2</span>], flow[MAXN * MAXN &lt;&lt; <span class="number">2</span>];</div><div class="line">    LL wei1[MAXN * MAXN &lt;&lt; <span class="number">2</span>], wei2[MAXN * MAXN &lt;&lt; <span class="number">2</span>], nxt[MAXN * MAXN &lt;&lt; <span class="number">2</span>], wei[MAXN * MAXN &lt;&lt; <span class="number">2</span>];</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(LL x, LL y, LL z, LL l, LL l1, LL l2)</span></span></div><div class="line">    &#123;</div><div class="line">        nxt[cnt] = head[x]; data[cnt] = y; flow[cnt] = z;</div><div class="line">        wei[cnt] = l; wei1[cnt] = l1; wei2[cnt] = l2; head[x] = cnt++;</div><div class="line">        </div><div class="line">        nxt[cnt] = head[y]; data[cnt] = x; flow[cnt] = <span class="number">0</span>;</div><div class="line">        wei[cnt] =-l; wei1[cnt] =-l1; wei2[cnt] =-l2; head[y] = cnt++;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">memset</span>(pre, <span class="number">-1</span>, <span class="keyword">sizeof</span> pre);</div><div class="line">        <span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dis);</div><div class="line">        dis[ss] = <span class="number">0</span>; q.push(ss); in_stack[ss] = <span class="literal">true</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span> (!q.empty()) &#123;</div><div class="line">            LL now = q.front(); q.pop();</div><div class="line">            in_stack[now] = <span class="literal">false</span>;</div><div class="line">            <span class="keyword">for</span> (LL i = head[now]; i != <span class="number">-1</span>; i = nxt[i]) &#123;</div><div class="line">                <span class="keyword">if</span> (flow[i] &amp;&amp; dis[data[i]] &gt; dis[now] + wei[i]) &#123;</div><div class="line">                    dis[data[i]] = dis[now] + wei[i];</div><div class="line">                    pre[data[i]] = i;</div><div class="line">                    <span class="keyword">if</span> (!in_stack[data[i]]) &#123;</div><div class="line">                        in_stack[data[i]] = <span class="literal">true</span>;</div><div class="line">                        q.push(data[i]);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> pre[tt] != <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> (LL i = tt; pre[i] != <span class="number">-1</span>; i = data[pre[i] ^ <span class="number">1</span>]) ret1 += wei1[pre[i]];</div><div class="line">        <span class="keyword">for</span> (LL i = tt; pre[i] != <span class="number">-1</span>; i = data[pre[i] ^ <span class="number">1</span>]) ret2 += wei2[pre[i]];</div><div class="line">        <span class="keyword">for</span> (LL i = tt; pre[i] != <span class="number">-1</span>; i = data[pre[i] ^ <span class="number">1</span>]) flow[pre[i]]--, flow[pre[i] ^ <span class="number">1</span>]++;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">std</span>::pair&lt;LL, LL&gt;main(LL argv[MAXN][MAXN])</div><div class="line">    &#123;</div><div class="line">        ret1 = ret2 = <span class="number">0</span>; cnt = <span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</div><div class="line">        FOR(i, <span class="number">1</span>, n) add(ss, i, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">        FOR(i, <span class="number">1</span>, n) FOR(j, <span class="number">1</span>, n) &#123;</div><div class="line">            add(i, j + n, <span class="number">1</span>, argv[i][j], A[i][j], B[i][j]);</div><div class="line">        &#125;</div><div class="line">        FOR(i, <span class="number">1</span>, n) add(i + n, tt, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">        <span class="keyword">while</span> (bfs()) dfs();</div><div class="line">        <span class="keyword">return</span> <span class="built_in">std</span>::make_pair(ret1, ret2);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">gongxian</span><span class="params">(<span class="built_in">std</span>::pair&lt;LL, LL&gt;l, <span class="built_in">std</span>::pair&lt;LL, LL&gt;mid, <span class="built_in">std</span>::pair&lt;LL, LL&gt;r)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> (l.second - r.second) * (l.first - mid.first) == (l.second - mid.second) * (l.first - r.first);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">get_ans</span><span class="params">(<span class="built_in">std</span>::pair&lt;LL, LL&gt;l, <span class="built_in">std</span>::pair&lt;LL, LL&gt;r)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (l.first == r.first || l.second == r.second)</div><div class="line">        <span class="keyword">return</span> Min(l.first * l.second, r.first * r.second);</div><div class="line">    FOR(i, <span class="number">1</span>, n) FOR(j, <span class="number">1</span>, n)</div><div class="line">        tmp[i][j] = -((r.second - l.second) * A[i][j] + (l.first - r.first) * B[i][j]);</div><div class="line">    <span class="built_in">std</span>::pair&lt;LL, LL&gt;mid = KM::main(tmp);</div><div class="line">    <span class="keyword">if</span> (gongxian(l, mid, r)) <span class="keyword">return</span> Min(l.first * l.second, r.first * r.second);</div><div class="line">    <span class="keyword">return</span> Min(get_ans(l, mid), get_ans(mid, r));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    freopen(<span class="string">"frame.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"frame.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    </div><div class="line">    LL tcase; in(tcase);</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (tcase--) &#123;</div><div class="line">        in(n);</div><div class="line">        FOR(i, <span class="number">1</span>, n) FOR(j, <span class="number">1</span>, n) in(A[i][j]);</div><div class="line">        FOR(i, <span class="number">1</span>, n) FOR(j, <span class="number">1</span>, n) in(B[i][j]);</div><div class="line">        <span class="built_in">std</span>::pair&lt;LL, LL&gt;retA = KM::main(A), retB = KM::main(B);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, get_ans(retA, retB));</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="day1-t2-世界树">Day1 T2 世界树</h3>
<hr>
<h4 id="思路-1">思路</h4>
<p>这也是我没学过的算法——虚树。</p>
<p>首先用单调栈维护右链，把虚树构建出来；</p>
<p>然后对于虚树上的每条边，把它的分界点找出来，然后分段赋给管理端点的那两个点。</p>
<p>注意判断管理端点的两个点相同的情况。</p>
<p>这个题目的构建虚树需要用lca，我用了倍增。</p>
<p>这个题目找到分界点也需要用倍增。</p>
<p>没有使用数据结构，代码却比数据结构题还要长。</p>
<hr>
<h4 id="代码-1">代码</h4>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(...) fprintf(stderr, __VA_ARGS__)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, a, b) for (int i = (a), i##_END_ = (b); i &lt;= i##_END_; i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DNF(i, a, b) for (int i = (a), i##_END_ = (b); i &gt;= i##_END_; i--)</span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function"><span class="keyword">void</span> <span class="title">in</span><span class="params">(Tp &amp;x)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> ch = getchar(); x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Min</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Max</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmax</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : x=y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmin</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : x=y;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">300010</span>;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> is_chs[MAXN];</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, q, num[MAXN], fa[MAXN], dfn[MAXN], sa[MAXN], depth[MAXN], sz[MAXN];</div><div class="line"><span class="keyword">int</span> INDEX, cnt, head[MAXN], data[MAXN &lt;&lt; <span class="number">1</span>], nxt[MAXN &lt;&lt; <span class="number">1</span>], log_num[<span class="number">1000010</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> anc[MAXN][<span class="number">20</span>], xsz[MAXN], val[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line">&#123;</div><div class="line">    nxt[cnt] = head[x]; data[cnt] = y; head[x] = cnt++;</div><div class="line">    nxt[cnt] = head[y]; data[cnt] = x; head[y] = cnt++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> pa)</span></span></div><div class="line">&#123;</div><div class="line">    sz[now] = <span class="number">1</span>;</div><div class="line">    depth[now] = depth[pa] + <span class="number">1</span>;</div><div class="line">    fa[now] = pa; dfn[now] = ++INDEX;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[now]; i != <span class="number">-1</span>; i = nxt[i]) &#123;</div><div class="line">        <span class="keyword">if</span> (data[i] != pa) &#123;</div><div class="line">            dfs(data[i], now);</div><div class="line">            sz[now] += sz[data[i]];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_anc</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> pa)</span></span></div><div class="line">&#123;</div><div class="line">    anc[now][<span class="number">0</span>] = pa;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; anc[now][i - <span class="number">1</span>] != <span class="number">-1</span>; i++) &#123;</div><div class="line">        anc[now][i] = anc[anc[now][i - <span class="number">1</span>]][i - <span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[now]; i != <span class="number">-1</span>; i = nxt[i]) &#123;</div><div class="line">        <span class="keyword">if</span> (data[i] != pa) dfs_anc(data[i], now);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> get_lca</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> eula[MAXN * <span class="number">3</span>], st[MAXN], ed[MAXN], IND, to[MAXN];</div><div class="line">    <span class="keyword">int</span> minx[MAXN * <span class="number">3</span>][<span class="number">21</span>];</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> now)</span></span></div><div class="line">    &#123;</div><div class="line">        eula[++eula[<span class="number">0</span>]] = ++IND;</div><div class="line">        st[now] = eula[<span class="number">0</span>]; to[IND] = now;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[now]; i != <span class="number">-1</span>; i = nxt[i]) &#123;</div><div class="line">            <span class="keyword">if</span> (data[i] != fa[now]) &#123;</div><div class="line">                dfs2(data[i]);</div><div class="line">                eula[++eula[<span class="number">0</span>]] = eula[st[now]];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        ed[now] = eula[<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (!x || !y) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (st[x] &gt; ed[y]) <span class="built_in">std</span>::swap(x, y); x = st[x]; y = ed[y];</div><div class="line">        <span class="keyword">int</span> delta = log_num[y - x + <span class="number">1</span>];</div><div class="line">        <span class="keyword">return</span> to[Min(minx[x][delta], minx[y - (<span class="number">1</span> &lt;&lt; delta) + <span class="number">1</span>][delta])];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        FOR(i, <span class="number">1</span>, eula[<span class="number">0</span>]) minx[i][<span class="number">0</span>] = eula[i];</div><div class="line">        FOR(i, <span class="number">1</span>, <span class="number">20</span>) &#123;</div><div class="line">            FOR(j, <span class="number">1</span>, eula[<span class="number">0</span>]) &#123;</div><div class="line">                <span class="keyword">if</span> (j + (<span class="number">1</span> &lt;&lt; i) - <span class="number">1</span> &gt; eula[<span class="number">0</span>]) <span class="keyword">break</span>;</div><div class="line">                minx[j][i] =</div><div class="line">                    Min(minx[j][i - <span class="number">1</span>], minx[j + (<span class="number">1</span> &lt;&lt; (i - <span class="number">1</span>))][i - <span class="number">1</span>]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        FOR(i, <span class="number">1</span>, <span class="number">1000000</span>) log_num[i] = log2(i);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> <span class="built_in">stack</span>[MAXN], top, in_tree[MAXN];</div><div class="line"><span class="keyword">int</span> head_xu[MAXN], cnt_xu, nxt_xu[MAXN &lt;&lt; <span class="number">1</span>], data_xu[MAXN &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> build_tree</div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add_xu</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line">    &#123;</div><div class="line">        nxt_xu[cnt_xu] = head_xu[x]; data_xu[cnt_xu] = y; head_xu[x] = cnt_xu++;</div><div class="line">        nxt_xu[cnt_xu] = head_xu[y]; data_xu[cnt_xu] = x; head_xu[y] = cnt_xu++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> dfn[x] &lt; dfn[y];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">builds_tree</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        cnt_xu = <span class="number">0</span>;</div><div class="line">        <span class="built_in">stack</span>[top = <span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">        in_tree[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">        FOR(i, <span class="number">1</span>, num[<span class="number">0</span>]) &#123;</div><div class="line">            is_chs[num[i]] = <span class="literal">true</span>;</div><div class="line">            in_tree[++in_tree[<span class="number">0</span>]] = num[i];</div><div class="line">        &#125;</div><div class="line">        in_tree[++in_tree[<span class="number">0</span>]] = <span class="number">0</span>;</div><div class="line">        <span class="built_in">std</span>::sort(in_tree + <span class="number">1</span>, in_tree + in_tree[<span class="number">0</span>] + <span class="number">1</span>, cmp);</div><div class="line">        <span class="keyword">int</span> now_in_tree = in_tree[<span class="number">0</span>];</div><div class="line">        FOR(i, <span class="number">2</span>, now_in_tree) &#123;</div><div class="line">            <span class="keyword">int</span> now = in_tree[i];</div><div class="line">            <span class="keyword">int</span> anc = get_lca::lca(<span class="built_in">stack</span>[top], now);</div><div class="line">            <span class="keyword">if</span> (anc == <span class="built_in">stack</span>[top]) <span class="built_in">stack</span>[++top] = now;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">                    <span class="keyword">int</span> tp = <span class="built_in">stack</span>[top], tp_l = <span class="built_in">stack</span>[top - <span class="number">1</span>];</div><div class="line">                    <span class="keyword">if</span> (tp_l == anc) &#123;</div><div class="line">                        add_xu(tp_l, tp); top--; <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (dfn[tp_l] &gt; dfn[anc]) &#123;</div><div class="line">                        add_xu(tp_l, tp); top--;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span> &#123;</div><div class="line">                        in_tree[++in_tree[<span class="number">0</span>]] = anc;</div><div class="line">                        add_xu(anc, tp); <span class="built_in">stack</span>[top] = anc; <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="built_in">stack</span>[++top] = now;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span> (top != <span class="number">1</span>) &#123;</div><div class="line">            add_xu(<span class="built_in">stack</span>[top - <span class="number">1</span>], <span class="built_in">stack</span>[top]); top--;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> find_father</div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">19</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">            <span class="keyword">if</span> (y &amp; (<span class="number">1</span> &lt;&lt; i)) &#123;</div><div class="line">                x = anc[x][i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> x;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> DP</div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> f[MAXN][<span class="number">2</span>], g[MAXN][<span class="number">2</span>], ret[MAXN];</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dp1</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> pa)</span></span></div><div class="line">    &#123;</div><div class="line">        val[now] = <span class="number">0</span>;</div><div class="line">        xsz[now] = <span class="number">1</span>;</div><div class="line">        f[now][<span class="number">0</span>] = is_chs[now] ? <span class="number">0</span> : <span class="number">0x3f3f3f3f</span>;</div><div class="line">        f[now][<span class="number">1</span>] = now;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head_xu[now]; i != <span class="number">-1</span>; i = nxt_xu[i]) &#123;</div><div class="line">            <span class="keyword">if</span> (data_xu[i] != pa) &#123;</div><div class="line">                dp1(data_xu[i], now);</div><div class="line">                xsz[now] += xsz[data_xu[i]];</div><div class="line">                <span class="keyword">int</span> frm = depth[data_xu[i]] - depth[now];</div><div class="line">                <span class="keyword">if</span> (f[now][<span class="number">0</span>] &gt; f[data_xu[i]][<span class="number">0</span>] + frm ||</div><div class="line">                    f[now][<span class="number">0</span>] == f[data_xu[i]][<span class="number">0</span>] + frm &amp;&amp;</div><div class="line">                    f[now][<span class="number">1</span>] &gt; f[data_xu[i]][<span class="number">1</span>])</div><div class="line">                &#123;</div><div class="line">                    f[now][<span class="number">1</span>] = f[data_xu[i]][<span class="number">1</span>];</div><div class="line">                    f[now][<span class="number">0</span>] = f[data_xu[i]][<span class="number">0</span>] + frm;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dp2</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> pa)</span></span></div><div class="line">    &#123;</div><div class="line">        g[now][<span class="number">0</span>] = f[now][<span class="number">0</span>];</div><div class="line">        g[now][<span class="number">1</span>] = f[now][<span class="number">1</span>];</div><div class="line">        <span class="keyword">if</span> (pa != <span class="number">-1</span>) &#123;</div><div class="line">            <span class="keyword">int</span> frm = depth[now] - depth[pa];</div><div class="line">            <span class="keyword">if</span> (g[now][<span class="number">0</span>] &gt; g[pa][<span class="number">0</span>] + frm ||</div><div class="line">                g[now][<span class="number">0</span>] == g[pa][<span class="number">0</span>] + frm &amp;&amp; g[now][<span class="number">1</span>] &gt; g[pa][<span class="number">1</span>])</div><div class="line">            &#123;</div><div class="line">                g[now][<span class="number">1</span>] = g[pa][<span class="number">1</span>]; g[now][<span class="number">0</span>] = g[pa][<span class="number">0</span>] + frm;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head_xu[now]; i != <span class="number">-1</span>; i = nxt_xu[i]) &#123;</div><div class="line">            <span class="keyword">if</span> (data_xu[i] != pa) dp2(data_xu[i], now);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getr</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z, <span class="keyword">bool</span> t)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (y - x + z &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (t) <span class="keyword">return</span> (y - x + z) / <span class="number">2</span>;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> ((y - x + z) % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">return</span> (y - x + z) / <span class="number">2</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">return</span> (y - x + z) / <span class="number">2</span> + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dp3</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> pa)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (!pa) &#123;</div><div class="line">            ret[g[now][<span class="number">1</span>]] += n - sz[now];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">bool</span> flag = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head_xu[now]; i != <span class="number">-1</span>; i = nxt_xu[i])</div><div class="line">            <span class="keyword">if</span> (data_xu[i] != pa) &#123;</div><div class="line">                flag = <span class="literal">true</span>;</div><div class="line">                <span class="keyword">int</span> nnum = data_xu[i], all;</div><div class="line">                <span class="keyword">if</span> (now) &#123;</div><div class="line">                    all = depth[nnum] - depth[now] - <span class="number">1</span>;</div><div class="line">                    <span class="keyword">if</span> (g[now][<span class="number">1</span>] == g[nnum][<span class="number">1</span>]) &#123;</div><div class="line">                        <span class="keyword">if</span> (all) &#123;</div><div class="line">                            <span class="keyword">int</span> pos = find_father::find(nnum, all);</div><div class="line">                            ret[g[now][<span class="number">1</span>]] += sz[pos] - sz[nnum];</div><div class="line">                            val[now] -= sz[pos];</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">else</span> val[now] -= sz[nnum];</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span> &#123;</div><div class="line"><span class="comment">//                    ret[g[now][1]] += getr(g[now][0], g[nnum][0], all,</span></div><div class="line"><span class="comment">//                                           g[now][1] &gt; g[nnum][1]);</span></div><div class="line"><span class="comment">//                    ret[g[nnum][1]] += getr(g[nnum][0], g[now][0], all,</span></div><div class="line"><span class="comment">//                                            g[nnum][1] &gt; g[now][1]);</span></div><div class="line">                        <span class="keyword">if</span> (!all) &#123;</div><div class="line">                            val[now] -= sz[nnum];</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">else</span> &#123;</div><div class="line">                            <span class="keyword">int</span> Anc = getr(g[nnum][<span class="number">0</span>], g[now][<span class="number">0</span>], all,</div><div class="line">                                           g[nnum][<span class="number">1</span>] &gt; g[now][<span class="number">1</span>]);</div><div class="line">                            <span class="keyword">int</span> pos = find_father::find(nnum, Anc);</div><div class="line">                            ret[g[nnum][<span class="number">1</span>]] += sz[pos] - sz[nnum];</div><div class="line">                            </div><div class="line">                            <span class="keyword">int</span> pos2 = find_father::find(nnum, all);</div><div class="line">                            ret[g[now][<span class="number">1</span>]] += sz[pos2] - sz[pos];</div><div class="line">                            val[now] -= sz[pos2];</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                dp3(nnum, now);</div><div class="line">            &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dp4</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> pa)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (now) ret[g[now][<span class="number">1</span>]] += sz[now] + val[now];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head_xu[now]; i != <span class="number">-1</span>; i = nxt_xu[i]) &#123;</div><div class="line">            <span class="keyword">if</span> (data_xu[i] != pa) dp4(data_xu[i], now);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        build_tree::builds_tree();</div><div class="line">        FOR(i, <span class="number">1</span>, num[<span class="number">0</span>]) ret[num[i]] = <span class="number">0</span>;</div><div class="line">        dp1(<span class="number">0</span>, <span class="number">-1</span>); dp2(<span class="number">0</span>, <span class="number">-1</span>); dp3(<span class="number">0</span>, <span class="number">-1</span>); dp4(<span class="number">0</span>, <span class="number">-1</span>);</div><div class="line">        FOR(i, <span class="number">1</span>, num[<span class="number">0</span>]) <span class="built_in">printf</span>(<span class="string">"%d "</span>, ret[num[i]]);</div><div class="line">        <span class="built_in">putchar</span>(<span class="number">10</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    freopen(<span class="string">"worldtree.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"worldtree.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    </div><div class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</div><div class="line">    <span class="built_in">memset</span>(head_xu, <span class="number">-1</span>, <span class="keyword">sizeof</span> head_xu);</div><div class="line">    </div><div class="line">    in(n);</div><div class="line">    FOR(i, <span class="number">1</span>, n - <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">int</span> x, y; in(x); in(y); add(x, y);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">memset</span>(anc, <span class="number">-1</span>, <span class="keyword">sizeof</span> anc);</div><div class="line">    </div><div class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>); dfs_anc(<span class="number">1</span>, <span class="number">0</span>);</div><div class="line">    get_lca::dfs2(<span class="number">1</span>); get_lca::start();</div><div class="line">    FOR(i, <span class="number">1</span>, n) sa[dfn[i]] = i;</div><div class="line"></div><div class="line">    in(q);</div><div class="line">    FOR(i, <span class="number">1</span>, q) &#123;</div><div class="line">        FOR(i, <span class="number">1</span>, num[<span class="number">0</span>])</div><div class="line">            is_chs[num[i]] = <span class="literal">false</span>;</div><div class="line">        FOR(i, <span class="number">1</span>, in_tree[<span class="number">0</span>])</div><div class="line">            head_xu[in_tree[i]] = <span class="number">-1</span>;</div><div class="line">        in(num[<span class="number">0</span>]);</div><div class="line">        FOR(j, <span class="number">1</span>, num[<span class="number">0</span>]) in(num[j]);</div><div class="line">        DP::work();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="day1-t3-米特运输">Day1 T3 米特运输</h3>
<hr>
<h4 id="思路-2">思路</h4>
<p>根据每个点的权值，计算出根节点的权值。</p>
<p>然后用 <span class="math inline">\(n-\)</span> 根节点权值的众数即可。</p>
<p>因为数据太大，所以需要取对数。</p>
<hr>
<h4 id="代码-2">代码</h4>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, a, b) for (int i = (a), i##_END_ = (b); i &lt;= i##_END_; i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DNF(i, a, b) for (int i = (a), i##_END_ = (b); i &gt;= i##_END_; i--)</span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function"><span class="keyword">void</span> <span class="title">in</span><span class="params">(Tp &amp;x)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> ch = getchar(), f = <span class="number">1</span>; x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (ch != <span class="string">'-'</span> &amp;&amp; (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)) ch = getchar();</div><div class="line">    <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">-1</span>, ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">    x *= f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmax</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : x=y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmin</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : x=y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Max</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Min</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : y;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">500010</span>;</div><div class="line"></div><div class="line"><span class="keyword">long</span> <span class="keyword">double</span> rot[MAXN], val[MAXN];</div><div class="line"><span class="keyword">int</span> n, w[MAXN], tot[MAXN];</div><div class="line"><span class="keyword">int</span> cnt, head[MAXN], data[MAXN &lt;&lt; <span class="number">1</span>], nxt[MAXN &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line">&#123;</div><div class="line">    nxt[cnt] = head[x]; data[cnt] = y; head[x] = cnt++;</div><div class="line">    nxt[cnt] = head[y]; data[cnt] = x; head[y] = cnt++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> pa)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[now]; i != <span class="number">-1</span>; i = nxt[i])</div><div class="line">        <span class="keyword">if</span> (data[i] != pa) &#123;</div><div class="line">            tot[now]++;</div><div class="line">            dfs1(data[i], now);</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> pa)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[now]; i != <span class="number">-1</span>; i = nxt[i]) &#123;</div><div class="line">        <span class="keyword">if</span> (data[i] != pa) &#123;</div><div class="line">            val[data[i]] = <span class="built_in">log</span>(tot[now]) + val[now];</div><div class="line">            dfs2(data[i], now);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    freopen(<span class="string">"meat.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"meat.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    </div><div class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</div><div class="line">    </div><div class="line">    in(n);</div><div class="line">    FOR(i, <span class="number">1</span>, n) in(w[i]);</div><div class="line">    FOR(i, <span class="number">1</span>, n - <span class="number">1</span>) &#123;<span class="keyword">int</span> u, v; in(u); in(v); add(u, v);&#125;</div><div class="line">    dfs1(<span class="number">1</span>, <span class="number">0</span>); dfs2(<span class="number">1</span>, <span class="number">0</span>);</div><div class="line">    FOR(i, <span class="number">1</span>, n) rot[i] = val[i] + <span class="built_in">log</span>(w[i]);</div><div class="line">    </div><div class="line">    <span class="built_in">std</span>::sort(rot + <span class="number">1</span>, rot + n + <span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>, line = <span class="number">0</span>;</div><div class="line">    FOR(i, <span class="number">1</span>, n) &#123;</div><div class="line">        <span class="keyword">if</span> (i == <span class="number">1</span> || <span class="built_in">fabs</span>(rot[i] - rot[i - <span class="number">1</span>]) &gt; eps) &#123;</div><div class="line">            chkmax(ret, line);</div><div class="line">            line = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> line++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    chkmax(ret, line);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, n - ret);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="day2-t1-抄卡组">Day2 T1 抄卡组</h3>
<hr>
<h4 id="思路-3">思路</h4>
<p>首先，如果所有的字符串都有通配符，那么只需要两两比较前缀和后缀即可。</p>
<p>就是按每个字符串不包含通配符的最大前缀长度进行排序，比较一遍；</p>
<p>然后按每个字符串不包含通配符的最大后缀长度进行排序，比较一边。</p>
<p>如果所有的字符串都没有通配符，那么只需要比较hash值就可以了。</p>
<p>如果有些有通配符，有些没有通配符，将没有通配符的进行比较，看是否相同。</p>
<p>然后对于有通配符的，将通配符视作分隔符，即把原串分为一段一段的，分开进行匹配。</p>
<p>注意有通配符的字符串和没有通配符的字符串的首尾要对应。</p>
<hr>
<h4 id="代码-3">代码</h4>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ULL;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, a, b) for (int i = (a), i##_END_ = (b); i &lt;= i##_END_; i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DNF(i, a, b) for (int i = (a), i##_END_ = (b); i &gt;= i##_END_; i--)</span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function"><span class="keyword">void</span> <span class="title">in</span><span class="params">(Tp &amp;x)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> ch = getchar(), f = <span class="number">1</span>; x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (ch != <span class="string">'-'</span> &amp;&amp; (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)) ch = getchar();</div><div class="line">    <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">-1</span>, ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">    x *= f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmax</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : x=y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmin</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : x=y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Max</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Min</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : y;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2000010</span>;</div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>;</div><div class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</div><div class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</div><div class="line"></div><div class="line"><span class="built_in">string</span> str[MAXN];</div><div class="line"><span class="keyword">int</span> t, n, len[MAXN];</div><div class="line">ULL hs[MAXN];</div><div class="line"><span class="keyword">const</span> ULL BASE = <span class="number">31</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> prefix[MAXN], suffix[MAXN], numb[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">gethash</span><span class="params">(<span class="keyword">int</span> num)</span></span></div><div class="line">&#123;</div><div class="line">    hs[num] = <span class="number">0</span>;</div><div class="line">    FOR(i, <span class="number">0</span>, len[num] - <span class="number">1</span>) &#123;</div><div class="line">        hs[num] = hs[num] * BASE + str[num][i];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> isop[MAXN];</div><div class="line"><span class="keyword">int</span> nopera[MAXN];</div><div class="line"></div><div class="line">ULL rhs[MAXN], po[MAXN];</div><div class="line"></div><div class="line"><span class="function">ULL <span class="title">power</span><span class="params">(ULL x, ULL y)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (!y) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> po[y];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">string</span> *a = str;</div><div class="line">    </div><div class="line">    FOR(i, <span class="number">1</span>, nopera[<span class="number">0</span>])</div><div class="line">        isop[nopera[i]] = <span class="literal">false</span>;</div><div class="line">    </div><div class="line">    nopera[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">    </div><div class="line">    FOR(i, <span class="number">1</span>, n) &#123;</div><div class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</div><div class="line">        FOR(j, <span class="number">0</span>, len[i] - <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (str[i][j] == <span class="string">'*'</span>) &#123;</div><div class="line">                flag = <span class="literal">false</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (flag) &#123;</div><div class="line">            isop[i] = <span class="literal">true</span>;</div><div class="line">            nopera[++nopera[<span class="number">0</span>]] = i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    FOR(i, <span class="number">2</span>, nopera[<span class="number">0</span>]) &#123;</div><div class="line">        <span class="keyword">if</span> (hs[nopera[i]] != hs[nopera[i - <span class="number">1</span>]]) &#123;</div><div class="line">            <span class="built_in">puts</span>(<span class="string">"N"</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> need_compare = nopera[<span class="number">1</span>];</div><div class="line">    ULL TBASE = <span class="number">1</span>;</div><div class="line"></div><div class="line">    FOR(i, <span class="number">1</span>, len[need_compare]) &#123;</div><div class="line">        rhs[i] = rhs[i - <span class="number">1</span>] + str[need_compare][i - <span class="number">1</span>] * TBASE;</div><div class="line">        TBASE = TBASE * BASE;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    FOR(i, <span class="number">1</span>, n) <span class="keyword">if</span> (!isop[i]) &#123;</div><div class="line">        <span class="keyword">int</span> lastpos = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>, k; j &lt;= len[i] - <span class="number">1</span>; j = k + <span class="number">1</span>) &#123;</div><div class="line">            k = j;</div><div class="line">            <span class="keyword">while</span> (k &lt; len[i] &amp;&amp; str[i][k] == <span class="string">'*'</span>) k++;</div><div class="line"></div><div class="line">            j = k;</div><div class="line">            <span class="keyword">while</span> (k &lt; len[i] &amp;&amp; str[i][k] != <span class="string">'*'</span>) k++; k--;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> (str[i][k] == <span class="string">'*'</span>) <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            ULL nowhs = <span class="number">0</span>, TBASE = <span class="number">1</span>;</div><div class="line">            FOR(l, j, k) &#123;</div><div class="line">                nowhs = nowhs + str[i][l] * TBASE;</div><div class="line">                TBASE = TBASE * BASE;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (lastpos + (k - j + <span class="number">1</span>) &gt; len[need_compare]) &#123;</div><div class="line">                    <span class="built_in">puts</span>(<span class="string">"N"</span>);</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (k == len[i] - <span class="number">1</span>) &#123;</div><div class="line">                    lastpos = len[need_compare] - (k - j + <span class="number">1</span>);</div><div class="line">                &#125;</div><div class="line">                ULL tmpnow = nowhs;</div><div class="line">                <span class="keyword">if</span> (rhs[lastpos + (k - j + <span class="number">1</span>)] - rhs[lastpos] == tmpnow * power(<span class="number">31</span>, lastpos)) &#123;</div><div class="line">                    lastpos += (k - j + <span class="number">1</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (j != <span class="number">0</span>) &#123;</div><div class="line">                    lastpos++;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="built_in">puts</span>(<span class="string">"N"</span>);</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">puts</span>(<span class="string">"Y"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp_prefix</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> prefix[x] &lt; prefix[y];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp_suffix</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> suffix[x] &lt; suffix[y];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    freopen(<span class="string">"hs.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"hs.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    </div><div class="line">    po[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    FOR(i, <span class="number">1</span>, <span class="number">2000000</span>) po[i] = po[i - <span class="number">1</span>] * BASE;</div><div class="line">    </div><div class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);  </div><div class="line">    <span class="built_in">cin</span> &gt;&gt; t;</div><div class="line">    <span class="keyword">while</span> (t--) &#123;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; n;</div><div class="line">        FOR(i, <span class="number">1</span>, n) <span class="built_in">cin</span> &gt;&gt; str[i], len[i] = str[i].size();</div><div class="line"></div><div class="line">        <span class="keyword">bool</span> isy = <span class="literal">true</span>, isn = <span class="literal">true</span>;</div><div class="line">        FOR(i, <span class="number">1</span>, n) &#123;</div><div class="line">            gethash(i);</div><div class="line">            <span class="keyword">bool</span> iss = <span class="literal">false</span>;</div><div class="line">            FOR(j, <span class="number">0</span>, len[i] - <span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (str[i][j] == <span class="string">'*'</span>) isn = <span class="literal">false</span>, iss = <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (!iss) isy = <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (isn) &#123;</div><div class="line">            <span class="keyword">bool</span> flag = <span class="literal">false</span>;</div><div class="line">            FOR(i, <span class="number">2</span>, n) <span class="keyword">if</span> (hs[i] != hs[i - <span class="number">1</span>]) &#123;</div><div class="line">                flag = <span class="literal">true</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (!flag) <span class="built_in">puts</span>(<span class="string">"Y"</span>);</div><div class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"N"</span>);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (isy) &#123;</div><div class="line">            FOR(i, <span class="number">1</span>, n) &#123;</div><div class="line">                FOR(j, <span class="number">0</span>, len[i] - <span class="number">1</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (str[i][j] == <span class="string">'*'</span>) &#123;</div><div class="line">                        prefix[i] = j; <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                DNF(j, len[i] - <span class="number">1</span>, <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (str[i][j] == <span class="string">'*'</span>) &#123;</div><div class="line">                        suffix[i] = len[i] - <span class="number">1</span> - j; <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">bool</span> flag = <span class="literal">true</span>;</div><div class="line">            FOR(i, <span class="number">1</span>, n) numb[i] = i;</div><div class="line">            <span class="built_in">std</span>::sort(numb + <span class="number">1</span>, numb + n + <span class="number">1</span>, cmp_prefix);</div><div class="line">            FOR(i, <span class="number">2</span>, n) &#123;</div><div class="line">                <span class="keyword">int</span> last = numb[i - <span class="number">1</span>], now = numb[i];</div><div class="line">                FOR(j, <span class="number">1</span>, prefix[last]) &#123;</div><div class="line">                    <span class="keyword">if</span> (str[last][j - <span class="number">1</span>] != str[now][j - <span class="number">1</span>]) &#123;</div><div class="line">                        flag = <span class="literal">false</span>; <span class="built_in">puts</span>(<span class="string">"N"</span>); <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (!flag) <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (!flag) <span class="keyword">continue</span>;</div><div class="line">            <span class="built_in">std</span>::sort(numb + <span class="number">1</span>, numb + n + <span class="number">1</span>, cmp_suffix);</div><div class="line">            FOR(i, <span class="number">2</span>, n) &#123;</div><div class="line">                <span class="keyword">int</span> last = numb[i - <span class="number">1</span>], now = numb[i];</div><div class="line">                FOR(j, <span class="number">1</span>, suffix[last]) &#123;</div><div class="line">                    <span class="keyword">if</span> (str[last][len[last] - j] != str[now][len[now] - j]) &#123;</div><div class="line">                        flag = <span class="literal">false</span>; <span class="built_in">puts</span>(<span class="string">"N"</span>); <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (!flag) <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (flag) <span class="built_in">puts</span>(<span class="string">"Y"</span>);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            work();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="day2-t2-道路堵塞">Day2 T2 道路堵塞</h3>
<hr>
<p>这是一道玄学题，需要依赖splay的复杂度的不确定性进行解题。</p>
<p>所以我跳过了它。</p>
<hr>
<h3 id="day2-t3-江南乐">Day2 T3 江南乐</h3>
<hr>
<h4 id="思路-4">思路</h4>
<p>首先用SG函数就可以做到 <span class="math inline">\(O(n^2)\)</span> （枚举分开的情况，然后用朴素的统计就行了）</p>
<p>然后因为这题是分石子，我们可以发现分出来的石子很多都是一样的。</p>
<p>其实只可能分出两种石子，大小为 <span class="math inline">\(n mod i\)</span> 的，和大小为 <span class="math inline">\(i-n mod i\)</span> 的。</p>
<p>根据数量的奇偶性，最终会被消成不超过两个。</p>
<p>因为只关注奇偶性，所以对于 <span class="math inline">\(\lfloor n/i\rfloor\)</span> 相等的多种分法，只需要计算最小的 <span class="math inline">\(i\)</span> 和 <span class="math inline">\(i+1\)</span> 两种即可。</p>
<p>复杂度为 <span class="math inline">\(O(n\sqrt{n})\)</span>。</p>
<hr>
<h4 id="代码-4">代码</h4>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, a, b) for (int i = (a), i##_END_ = (b); i &lt;= i##_END_; i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DNF(i, a, b) for (int i = (a), i##_END_ = (b); i &gt;= i##_END_; i--)</span></div><div class="line"> </div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function"><span class="keyword">void</span> <span class="title">in</span><span class="params">(Tp &amp;x)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> ch = getchar(), f = <span class="number">1</span>; x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (ch != <span class="string">'-'</span> &amp;&amp; (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)) ch = getchar();</div><div class="line">    <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">-1</span>, ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">    x *= f;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmax</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : x=y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmin</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : x=y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Max</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Min</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : y;&#125;</div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">100010</span>;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> t, f, sg[MAXN], can[MAXN];</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    freopen(<span class="string">"game.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"game.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    </div><div class="line">    in(t); in(f);</div><div class="line">    FOR(i, <span class="number">0</span>, f - <span class="number">1</span>) sg[i] = <span class="number">0</span>;</div><div class="line">    FOR(i, f, <span class="number">100000</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>, k; j &lt;= i; j = k + <span class="number">1</span>) &#123;</div><div class="line">            k = i / (i / j);</div><div class="line">            <span class="keyword">int</span> s1 = j, s2 = j + <span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> a = ((i % s1) &amp; <span class="number">1</span>) ? (i / s1 + <span class="number">1</span>) : <span class="number">0</span>;</div><div class="line">            <span class="keyword">int</span> b = ((s1 - (i % s1)) &amp; <span class="number">1</span>) ? (i / s1) : <span class="number">0</span>;</div><div class="line">            can[sg[a] ^ sg[b]] = i;</div><div class="line">            a = ((i % s2) &amp; <span class="number">1</span>) ? (i / s2 + <span class="number">1</span>) : <span class="number">0</span>;</div><div class="line">            b = ((s2 - (i % s2)) &amp; <span class="number">1</span>) ? (i / s2) : <span class="number">0</span>;</div><div class="line">            can[sg[a] ^ sg[b]] = i;</div><div class="line">        &#125;</div><div class="line">        FOR(j, <span class="number">0</span>, <span class="number">100000</span>)</div><div class="line">            <span class="keyword">if</span> (can[j] != i) &#123;</div><div class="line">                sg[i] = j;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">    &#125;</div><div class="line">    FOR(i, <span class="number">1</span>, t) &#123;</div><div class="line">        <span class="keyword">int</span> n, ret = <span class="number">0</span>; in(n);</div><div class="line">        FOR(j, <span class="number">1</span>, n) &#123;</div><div class="line">            <span class="keyword">int</span> x; in(x); ret ^= sg[x];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (ret) <span class="built_in">printf</span>(<span class="string">"1"</span>);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"0"</span>);</div><div class="line">        <span class="keyword">if</span> (i != t) <span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;hnoi2014解题报告&quot;&gt;HNOI2014解题报告&lt;/h2&gt;
&lt;h4 id=&quot;author-pengyihao&quot;&gt;Author: Pengyihao&lt;/h4&gt;
    
    </summary>
    
      <category term="HNOI" scheme="http://yoursite.com/categories/HNOI/"/>
    
    
      <category term="HNOI" scheme="http://yoursite.com/tags/HNOI/"/>
    
  </entry>
  
  <entry>
    <title>test20170405总结</title>
    <link href="http://yoursite.com/2017/04/05/test20170405%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/04/05/test20170405总结/</id>
    <published>2017-04-05T05:53:44.000Z</published>
    <updated>2017-04-05T06:15:11.124Z</updated>
    
    <content type="html"><![CDATA[<h2 id="test20170405总结">test20170405总结</h2>
<p>做题顺序：T1-&gt;T3-&gt;T2</p>
<a id="more"></a>
<hr>
<h4 id="t1">T1</h4>
<p>我的做法是枚举每一条线段，对于长度相等、斜率相等的线段只需要枚举一根就可以了，只要枚举端点在左上角或左上角的就行，这个是 <span class="math inline">\(O(nm)\)</span> 的。</p>
<p>然后对于每根线段，它的起点能放在哪些地方，这个范围很容易求，把答案乘起来就好了。</p>
<p>然后剩下的问题就转化为，在一根数轴上有 <span class="math inline">\(n\)</span> 个点，在上面取 <span class="math inline">\(m\)</span> 个点，使得两两距离不小于 <span class="math inline">\(d\)</span> 的方案数。</p>
<p>这直接用组合数就可以求了。</p>
<p>所以是 <span class="math inline">\(O(nm)\)</span> 的？</p>
<p><strong>不知道为什么答案错了～</strong></p>
<p>期望得分：100分。</p>
<p>实际得分：20分。</p>
<hr>
<h4 id="t2">T2</h4>
<p>并不会做……</p>
<p>用 <span class="math inline">\(f[i][j][k]\)</span> 表示从 <span class="math inline">\(i\)</span> 到 <span class="math inline">\(j\)</span> 走了 <span class="math inline">\(k\)</span> 条边的最长路的长度，每次转移的时候判一下有没有正环即可了……</p>
<p><strong>这个做法显然是对的，而且十分好写，可还是挂掉了……</strong></p>
<p>期望得分：60</p>
<p>实际得分：45分。</p>
<hr>
<h4 id="t3">T3</h4>
<p><strong>这是最惨的一道题。</strong></p>
<p>我的做法是先缩点，然后枚举右边区间的端点，再用set维护左边区间。</p>
<p>是 <span class="math inline">\(O(10^6\log 10^6)\)</span> 的。</p>
<p><strong>但是因为题目中没有说明 <span class="math inline">\(A[i]\)</span> 的范围！！！</strong></p>
<p><strong>我以为是 <span class="math inline">\(1000000\)</span> 级别的！！！</strong></p>
<p><strong>没有用MAP！！！</strong></p>
<p><strong>然后RE辣！！！</strong></p>
<p><strong>加了一个MAP就AC了！！！</strong></p>
<p>期望得分：100</p>
<p>实际得分：30分。</p>
<hr>
<h3 id="总结">总结</h3>
<p>期望得分：260</p>
<p>实际得分：95……</p>
<p>好尴尬啊</p>
<p>两天没考试，手又生了……</p>
<p>总是莫名其妙的错误……</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;test20170405总结&quot;&gt;test20170405总结&lt;/h2&gt;
&lt;p&gt;做题顺序：T1-&amp;gt;T3-&amp;gt;T2&lt;/p&gt;
    
    </summary>
    
      <category term="TEST" scheme="http://yoursite.com/categories/TEST/"/>
    
    
      <category term="TEST" scheme="http://yoursite.com/tags/TEST/"/>
    
  </entry>
  
  <entry>
    <title>HNOI2013解题报告</title>
    <link href="http://yoursite.com/2017/04/02/hnoi2013%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    <id>http://yoursite.com/2017/04/02/hnoi2013解题报告/</id>
    <published>2017-04-02T07:41:40.000Z</published>
    <updated>2017-04-02T08:00:57.922Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hnoi2013解题报告">HNOI2013解题报告</h2>
<h4 id="author-pengyihao">Author: Pengyihao</h4>
<a id="more"></a>
<hr>
<h3 id="day1-t1-比赛">Day1 T1 比赛</h3>
<hr>
<h4 id="思路">思路</h4>
<p>这是一道搜索的题目。</p>
<p>一个重要的优化就是，因为球队的分数排序后是不影响后面的答案的，所以判重的时候可以很方便。</p>
<p>然后还有就是 <span class="math inline">\(28^{10}\)</span> 是不会爆 long long 的……</p>
<hr>
<h4 id="代码">代码</h4>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, a, b) for (int i = (a), i##_END_ = (b); i &lt;= i##_END_; i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DNF(i, a, b) for (int i = (a), i##_END_ = (b); i &gt;= i##_END_; i--)</span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function"><span class="keyword">void</span> <span class="title">in</span><span class="params">(Tp &amp;x)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> ch = getchar(), f = <span class="number">1</span>; x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (ch != <span class="string">'-'</span> &amp;&amp; (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)) ch = getchar();</div><div class="line">    <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">-1</span>, ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">    x *= f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmax</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : x=y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmin</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : x=y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Max</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Min</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : y;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">20</span>, MOD = <span class="number">1000000007</span>;</div><div class="line"></div><div class="line">LL a[MAXN];</div><div class="line"></div><div class="line"><span class="built_in">std</span>::<span class="built_in">map</span>&lt;LL, LL&gt;mp;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">hash</span><span class="params">(<span class="keyword">int</span> now)</span></span></div><div class="line">&#123;</div><div class="line">    LL res = now, tmp[MAXN];</div><div class="line">    FOR(i, <span class="number">1</span>, now) tmp[i] = a[i];</div><div class="line">    <span class="built_in">std</span>::sort(tmp + <span class="number">1</span>, tmp + now + <span class="number">1</span>, <span class="built_in">std</span>::less&lt;<span class="keyword">int</span>&gt;());</div><div class="line">    FOR(i, <span class="number">1</span>, now) res += res * <span class="number">28</span> + tmp[i];</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> n)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (a[n] &gt; <span class="number">3</span> * (n - now)) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line"></div><div class="line">    LL res = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (now == n) &#123;</div><div class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            LL h = hash(n - <span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span> (mp[h]) <span class="keyword">return</span> mp[h];</div><div class="line">            <span class="keyword">return</span> mp[h] = DFS(<span class="number">1</span>, n - <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (a[n] &gt;= <span class="number">3</span>) &#123;</div><div class="line">        LL tmp = <span class="number">0</span>;</div><div class="line">        a[n] -= <span class="number">3</span>, tmp = DFS(now + <span class="number">1</span>, n);</div><div class="line">        <span class="keyword">if</span> (tmp != <span class="number">-1</span>) (res += tmp) %= MOD;</div><div class="line">        a[n] += <span class="number">3</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (a[n] &amp;&amp; a[now]) &#123;</div><div class="line">        LL tmp = <span class="number">0</span>;</div><div class="line">        a[n]--, a[now]--, tmp = DFS(now + <span class="number">1</span>, n);</div><div class="line">        <span class="keyword">if</span> (tmp != <span class="number">-1</span>) (res += tmp) %= MOD;</div><div class="line">        a[n]++, a[now]++;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (a[now] &gt;= <span class="number">3</span>) &#123;</div><div class="line">        LL tmp = <span class="number">0</span>;</div><div class="line">        a[now] -= <span class="number">3</span>, tmp = DFS(now + <span class="number">1</span>, n);</div><div class="line">        <span class="keyword">if</span> (tmp != <span class="number">-1</span>) (res += tmp) %= MOD;</div><div class="line">        a[now] += <span class="number">3</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> res ? res : <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    freopen(<span class="string">"match.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"match.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line"></div><div class="line">    in(n);</div><div class="line"></div><div class="line">    FOR(i, <span class="number">1</span>, n) in(a[i]);</div><div class="line"></div><div class="line">    <span class="built_in">std</span>::sort(a + <span class="number">1</span>, a + n + <span class="number">1</span>, <span class="built_in">std</span>::less&lt;<span class="keyword">int</span>&gt;());</div><div class="line">    </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, DFS(<span class="number">1</span>, n));</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="day1-t2-消毒">Day1 T2 消毒</h3>
<hr>
<h4 id="思路-1">思路</h4>
<p>可以发现最优的话一定要是，选择的区域中的一维为 <span class="math inline">\(1\)</span>，另外两维为最大值。</p>
<p>因为 <span class="math inline">\(abc\leq 5000\)</span>，所以它们中的最小值是小于 <span class="math inline">\(20\)</span> 的。</p>
<p>把这一维看作高，然后枚举每一层选不选。</p>
<p>然后剩下的就转化成了二维问题。</p>
<p>这就是个典型的二分图最小点覆盖，网络流跑就可以了。</p>
<p>时间复杂度为 <span class="math inline">\(O(\)</span>松<span class="math inline">\()\)</span> 。注意要进行常数优化。</p>
<hr>
<h4 id="代码-1">代码</h4>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(...) fprintf(stderr, __VA_ARGS__)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, a, b) for (int i = (a), i##_END_ = (b); i &lt;= i##_END_; i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DNF(i, a, b) for (int i = (a), i##_END_ = (b); i &gt;= i##_END_; i--)</span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function"><span class="keyword">void</span> <span class="title">in</span><span class="params">(Tp &amp;x)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> ch = getchar(), f = <span class="number">1</span>; x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (ch != <span class="string">'-'</span> &amp;&amp; (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)) ch = getchar();</div><div class="line">    <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">-1</span>, ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">    x *= f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmax</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : x=y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmin</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : x=y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Max</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Min</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : y;&#125;</div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">vector</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">5002</span>;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> chose[<span class="number">20</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> a[<span class="number">4</span>], ans;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> <span class="built_in">map</span>[MAXN][MAXN];</div><div class="line"></div><div class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;g[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    ans = <span class="number">0x3f3f3f3f</span>;</div><div class="line">    </div><div class="line">    FOR(i, <span class="number">1</span>, <span class="number">3</span>) in(a[i]);</div><div class="line"></div><div class="line">    FOR(i, <span class="number">0</span>, a[<span class="number">1</span>] + <span class="number">1</span>) &#123;</div><div class="line">        g[i].resize(a[<span class="number">2</span>] + <span class="number">2</span>);</div><div class="line">        FOR(j, <span class="number">0</span>, a[<span class="number">2</span>] + <span class="number">1</span>) g[i][j].resize(a[<span class="number">3</span>] + <span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">   </div><div class="line">    FOR(i, <span class="number">1</span>, a[<span class="number">1</span>]) &#123;</div><div class="line">        FOR(j, <span class="number">1</span>, a[<span class="number">2</span>]) FOR(k, <span class="number">1</span>, a[<span class="number">3</span>]) in(g[i][j][k]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> ss = <span class="number">0</span>, tt = <span class="number">5008</span>, INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">queue</span>;</div><div class="line"></div><div class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</div><div class="line"><span class="keyword">bool</span> link[MAXN];</div><div class="line"><span class="keyword">int</span> dis[<span class="number">5010</span>], cur[<span class="number">5010</span>];</div><div class="line"><span class="keyword">int</span> cnt, head[<span class="number">5010</span>], data[<span class="number">20010</span>], flow[<span class="number">20010</span>], nxt[<span class="number">20010</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span></div><div class="line">&#123;</div><div class="line">    nxt[cnt] = head[x]; data[cnt] = y; flow[cnt] = z; head[x] = cnt++;</div><div class="line">    nxt[cnt] = head[y]; data[cnt] = x; flow[cnt] = <span class="number">0</span>; head[y] = cnt++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> times, maxx = <span class="number">1</span>, alledge;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Edge &#123;</div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    Edge(<span class="keyword">int</span> a=<span class="number">0</span>, <span class="keyword">int</span> b=<span class="number">0</span>): x(a), y(b) &#123;&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Edge&gt;edge[<span class="number">20</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    dis[ss] = times; q.push(ss);</div><div class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</div><div class="line">        <span class="keyword">int</span> now = q.front(); q.pop();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[now]; i != <span class="number">-1</span>; i = nxt[i]) &#123;</div><div class="line">            <span class="keyword">if</span> (dis[data[i]] &lt; times &amp;&amp; flow[i]) &#123;</div><div class="line">                dis[data[i]] = dis[now] + <span class="number">1</span>;</div><div class="line">                q.push(data[i]);</div><div class="line">                chkmax(maxx, dis[now] + <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> dis[tt] &gt;= times;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> fl)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (now == tt) <span class="keyword">return</span> fl;</div><div class="line">    <span class="keyword">int</span> flo;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[now]; i != <span class="number">-1</span>; i = nxt[i]) &#123;</div><div class="line">        <span class="keyword">if</span> (flow[i] &amp;&amp; dis[data[i]] == dis[now] + <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (flo = dfs(data[i], Min(fl, flow[i]))) &#123;</div><div class="line">                flow[i] -= flo;</div><div class="line">                flow[i ^ <span class="number">1</span>] += flo;</div><div class="line">                <span class="keyword">return</span> flo;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> minx)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> tmptot = <span class="number">0</span>;</div><div class="line">    FOR(i, <span class="number">1</span>, minx) <span class="keyword">if</span> (chose[i]) tmptot++;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (tmptot &gt;= ans) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">    cnt = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> tot = tmptot;</div><div class="line"></div><div class="line"><span class="comment">// ***********************************************</span></div><div class="line"></div><div class="line"><span class="comment">// make_Edge</span></div><div class="line"></div><div class="line">    <span class="keyword">int</span> Addition;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (minx == a[<span class="number">1</span>]) Addition = a[<span class="number">2</span>];</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (minx == a[<span class="number">2</span>]) Addition = a[<span class="number">1</span>];</div><div class="line">    <span class="keyword">else</span> Addition = a[<span class="number">1</span>];</div><div class="line"></div><div class="line">    FOR(k, <span class="number">1</span>, minx) <span class="keyword">if</span> (!chose[k]) &#123;</div><div class="line">        FOR(i, <span class="number">0</span>, edge[k].size() - <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">int</span> fr = edge[k][i].x, to = edge[k][i].y + Addition;</div><div class="line">            <span class="keyword">if</span> (!<span class="built_in">map</span>[fr][to - Addition]) &#123;</div><div class="line">                add(fr, to, <span class="number">1</span>);</div><div class="line">                <span class="keyword">if</span> (!link[fr]) &#123;link[fr] = <span class="literal">true</span>; add(ss, fr, <span class="number">1</span>);&#125;</div><div class="line">                <span class="keyword">if</span> (!link[to]) &#123;link[to] = <span class="literal">true</span>; add(to, tt, <span class="number">1</span>);&#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    </div><div class="line"></div><div class="line"><span class="comment">// ***********************************************</span></div><div class="line">    </div><div class="line">    <span class="keyword">int</span> fl = <span class="number">0</span>;</div><div class="line"></div><div class="line">    times = maxx + <span class="number">1</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">while</span> (bfs()) &#123;</div><div class="line">        <span class="comment">//memcpy(cur, head, sizeof head);</span></div><div class="line">        <span class="keyword">int</span> tmp;</div><div class="line">        <span class="keyword">while</span> (tmp = dfs(ss, INF)) fl += tmp;</div><div class="line"></div><div class="line">        times = maxx + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    chkmin(ans, fl + tot);</div><div class="line"></div><div class="line">    FOR(k, <span class="number">1</span>, minx) <span class="keyword">if</span> (!chose[k]) FOR(i, <span class="number">0</span>, edge[k].size() - <span class="number">1</span>) &#123;</div><div class="line">        <span class="built_in">map</span>[edge[k][i].x][edge[k][i].y] = <span class="literal">false</span>;</div><div class="line">        link[edge[k][i].x] = link[edge[k][i].y + Addition] = <span class="literal">false</span>;</div><div class="line">        head[edge[k][i].x] = head[edge[k][i].y + Addition] = <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    head[ss] = head[tt] = <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> minx)</span></span></div><div class="line">&#123;</div><div class="line">    chose[now] = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">if</span> (now == minx) check(minx);</div><div class="line">    <span class="keyword">else</span> search(now + <span class="number">1</span>, minx);</div><div class="line">    chose[now] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">if</span> (now == minx) check(minx);</div><div class="line">    <span class="keyword">else</span> search(now + <span class="number">1</span>, minx);</div><div class="line">    chose[now] = <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> minx = <span class="number">5000</span>;</div><div class="line">    FOR(i, <span class="number">1</span>, <span class="number">3</span>) chkmin(minx, a[i]);</div><div class="line"></div><div class="line">    alledge = <span class="number">0</span>;</div><div class="line"></div><div class="line">    FOR(i, <span class="number">1</span>, minx) &#123;</div><div class="line">        edge[i].clear();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (minx == a[<span class="number">1</span>]) &#123;</div><div class="line">        FOR(k, <span class="number">1</span>, a[<span class="number">1</span>]) &#123;</div><div class="line">            FOR(i, <span class="number">1</span>, a[<span class="number">2</span>])    FOR(j, <span class="number">1</span>, a[<span class="number">3</span>])</div><div class="line">                <span class="keyword">if</span> (g[k][i][j]) edge[k].push_back(Edge(i, j));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (minx == a[<span class="number">2</span>]) &#123;</div><div class="line">        </div><div class="line">            FOR(i, <span class="number">1</span>, a[<span class="number">1</span>]) FOR(k, <span class="number">1</span>, a[<span class="number">2</span>]) &#123; FOR(j, <span class="number">1</span>, a[<span class="number">3</span>])</div><div class="line">                <span class="keyword">if</span> (g[i][k][j]) edge[k].push_back(Edge(i, j));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        </div><div class="line">            FOR(i, <span class="number">1</span>, a[<span class="number">1</span>]) FOR(j, <span class="number">1</span>, a[<span class="number">2</span>]) FOR(k, <span class="number">1</span>, a[<span class="number">3</span>]) &#123;</div><div class="line">                <span class="keyword">if</span> (g[i][j][k]) edge[k].push_back(Edge(i, j));</div><div class="line">            &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    search(<span class="number">1</span>, minx);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    debug(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    freopen(<span class="string">"clear.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"clear.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> tcase; in(tcase);</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (tcase--) &#123;</div><div class="line">        init();</div><div class="line">        work();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="day1-t3-旅行">Day1 T3 旅行</h3>
<p>这是一道很难的题目。我看了题解也暂时无法解决此题，所以决定跳过它。</p>
<hr>
<h3 id="day2-t1-数列">Day2 T1 数列</h3>
<hr>
<h4 id="思路-2">思路</h4>
<p>考虑差分数列。</p>
<p>差分数列的可能数量为 <span class="math inline">\(m^{k-1}\)</span>。</p>
<p>于是答案就为 <span class="math inline">\(\sum{n-\sum_{i=1}^{k-1}{a_i}}\)</span></p>
<p>其中 <span class="math inline">\(a_i\)</span> 表示差分数列的第 <span class="math inline">\(i\)</span> 项，最前面的 <span class="math inline">\(\sum\)</span> 表示枚举的差分数列。</p>
<p><span class="math inline">\(n\)</span> 可以提出来，而 <span class="math inline">\(a_i\)</span> 的贡献是独立的。</p>
<p>所以最后答案为</p>
<p><span class="math display">\[m^{k-1}\times n - m(m+1)/2\times (k-1)\times m^{k-2}\]</span></p>
<hr>
<h4 id="代码-2">代码</h4>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, a, b) for (int i = (a), i##_END_ = (b); i &lt;= i##_END_; i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DNF(i, a, b) for (int i = (a), i##_END_ = (b); i &gt;= i##_END_; i--)</span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function"><span class="keyword">void</span> <span class="title">in</span><span class="params">(Tp &amp;x)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> ch = getchar(), f = <span class="number">1</span>; x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (ch != <span class="string">'-'</span> &amp;&amp; (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)) ch = getchar();</div><div class="line">    <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">-1</span>, ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">    x *= f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmax</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : x=y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmin</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : x=y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Max</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Min</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : y;&#125;</div><div class="line"></div><div class="line">LL ans = <span class="number">0</span>;</div><div class="line">LL n, k, m, p;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">power</span><span class="params">(LL x, LL y, LL p)</span></span></div><div class="line">&#123;</div><div class="line">    x %= p;</div><div class="line">    </div><div class="line">    LL ret = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (y) &#123;</div><div class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) ret = <span class="number">1l</span>l * ret * x % p;</div><div class="line">        x = <span class="number">1l</span>l * x * x % p;</div><div class="line">        y &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    freopen(<span class="string">"seq.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"seq.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    </div><div class="line">    in(n); in(k); in(m); in(p);</div><div class="line">    n %= p;</div><div class="line">    </div><div class="line">    ans = <span class="number">1l</span>l * power(m, k - <span class="number">1</span>, p) * n % p;</div><div class="line">    ans = ((ans - <span class="number">1l</span>l * (<span class="number">1l</span>l * m * (m + <span class="number">1</span>) / <span class="number">2</span>) % p *</div><div class="line">           (k - <span class="number">1</span>) % p * power(m, k - <span class="number">2</span>, p) % p) % p + p) % p;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="day2-t2-游走">Day2 T2 游走</h3>
<hr>
<h4 id="思路-3">思路</h4>
<p>我们可以贪心来做——求出每条边走过的期望次数，然后从大到小分配从 <span class="math inline">\(1\)</span> 到 <span class="math inline">\(m\)</span> 的编号。</p>
<p>边的期望次数的求法是一个裸的高斯消元，这里就不再赘述。</p>
<hr>
<h3 id="代码-3">代码</h3>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">510</span>;</div><div class="line"> </div><div class="line"><span class="keyword">bool</span> f[MAXN][MAXN];</div><div class="line"><span class="keyword">int</span> n, m, du[MAXN], all;</div><div class="line"><span class="keyword">long</span> <span class="keyword">double</span> matrix[MAXN][MAXN], times[MAXN], timess[MAXN * MAXN];</div><div class="line"> </div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function"><span class="keyword">void</span> <span class="title">in</span><span class="params">(Tp &amp;x)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> ch = getchar(); x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">gauss</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</div><div class="line">        <span class="keyword">long</span> <span class="keyword">double</span> maxu = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> maxv = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = j; i &lt;= n + <span class="number">1</span>; i++)</div><div class="line">            <span class="keyword">if</span> (maxu &lt; <span class="built_in">fabs</span>(matrix[i][j])) &#123;</div><div class="line">                maxu = <span class="built_in">fabs</span>(matrix[i][j]);</div><div class="line">                maxv = i;</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + <span class="number">1</span>; i++) &#123;</div><div class="line">            <span class="keyword">long</span> <span class="keyword">double</span> t = matrix[j][i];</div><div class="line">            matrix[j][i] = matrix[maxv][i];</div><div class="line">            matrix[maxv][i] = t;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">long</span> <span class="keyword">double</span> eps = matrix[j][j];</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">fabs</span>(eps) &lt; <span class="number">1e-10</span>) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + <span class="number">1</span>; i++)</div><div class="line">            matrix[j][i] /= eps;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + <span class="number">1</span>; i++)</div><div class="line">            <span class="keyword">if</span> (i != j) &#123;</div><div class="line">                <span class="keyword">long</span> <span class="keyword">double</span> epss = matrix[i][j];</div><div class="line">                <span class="keyword">if</span> (<span class="built_in">fabs</span>(epss) &lt; <span class="number">1e-10</span>) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n + <span class="number">1</span>; k++)</div><div class="line">                    matrix[i][k] -= matrix[j][k] * epss;</div><div class="line">            &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">        times[i] = matrix[i][n + <span class="number">1</span>] / matrix[i][i];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++)</div><div class="line">            <span class="keyword">if</span> (f[i][j]) &#123;</div><div class="line">                <span class="keyword">if</span> (j == n) timess[++all] = times[i] / du[i];</div><div class="line">                <span class="keyword">else</span> timess[++all] = times[i] / du[i] + times[j] / du[j];</div><div class="line">            &#125;</div><div class="line">    <span class="built_in">std</span>::sort(timess + <span class="number">1</span>, timess + all + <span class="number">1</span>);</div><div class="line">    <span class="keyword">long</span> <span class="keyword">double</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= all; i++) &#123;</div><div class="line">        ans += timess[i] * (all - i + <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%.3Lf\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    freopen(<span class="string">"walk.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"walk.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    in(n); in(m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</div><div class="line">        <span class="keyword">int</span> u, v;</div><div class="line">        in(u); in(v);</div><div class="line">        f[u][v] = f[v][u] = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">if</span> (u != n) du[u]++;</div><div class="line">        <span class="keyword">if</span> (v != n) du[v]++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++)</div><div class="line">            <span class="keyword">if</span> (f[i][j])</div><div class="line">                matrix[i][j] = (<span class="keyword">long</span> <span class="keyword">double</span>)(<span class="number">1</span>) / du[j];</div><div class="line">        matrix[i][i] = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">if</span> (i == <span class="number">1</span>) matrix[i][n + <span class="number">1</span>] = <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    matrix[n + <span class="number">1</span>][n] = <span class="number">1</span>;</div><div class="line">    matrix[n + <span class="number">1</span>][n + <span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    gauss();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="day2-t3-切糕">Day2 T3 切糕</h3>
<hr>
<h4 id="思路-4">思路</h4>
<p>对于每一个位置，从所有层向上一层连边，容量为点权。</p>
<p>对于每一个位置，从第 <span class="math inline">\(i\)</span> 层向相邻位置的 <span class="math inline">\(i-d\)</span> 层连边，容量为 <span class="math inline">\(+\infty\)</span>。</p>
<p>对于每一个位置，从源点向第一层连边，容量为 <span class="math inline">\(+\infty\)</span>。</p>
<p>对于每一个位置，从最高层向汇点连边，容量为 <span class="math inline">\(+\infty\)</span>。</p>
<hr>
<h4 id="代码-4">代码</h4>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PLA(i, j, k) ((i) * 2500 + (j) * 50 + (k))</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, a, b) for (int i = (a), i##_END_ = (b); i &lt;= i##_END_; i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DNF(i, a, b) for (int i = (a), i##_END_ = (b); i &gt;= i##_END_; i--)</span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function"><span class="keyword">void</span> <span class="title">in</span><span class="params">(Tp &amp;x)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> ch = getchar(), f = <span class="number">1</span>; x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (ch != <span class="string">'-'</span> &amp;&amp; (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)) ch = getchar();</div><div class="line">    <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">-1</span>, ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">    x *= f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmax</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : x=y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmin</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : x=y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Max</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Min</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : y;&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> p, qs, r, d;</div><div class="line"></div><div class="line"><span class="keyword">int</span> height[<span class="number">50</span>][<span class="number">50</span>][<span class="number">50</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> cnt, dis[<span class="number">200010</span>], head[<span class="number">200010</span>], data[<span class="number">200010</span> &lt;&lt; <span class="number">1</span>], flow[<span class="number">200010</span> &lt;&lt; <span class="number">1</span>], cur[<span class="number">200010</span>], nxt[<span class="number">200010</span> &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">queue</span>; <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> ss = <span class="number">0</span>, tt = <span class="number">200009</span>, INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">memset</span>(dis, <span class="number">-1</span>, <span class="keyword">sizeof</span> dis);</div><div class="line">    dis[ss] = <span class="number">0</span>; q.push(ss);</div><div class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</div><div class="line">        <span class="keyword">int</span> now = q.front(); q.pop();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[now]; i != <span class="number">-1</span>; i = nxt[i]) &#123;</div><div class="line">            <span class="keyword">if</span> (dis[data[i]] == <span class="number">-1</span> &amp;&amp; flow[i]) &#123;</div><div class="line">                dis[data[i]] = dis[now] + <span class="number">1</span>;</div><div class="line">                q.push(data[i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> dis[tt] != <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> fl)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (now == tt) <span class="keyword">return</span> fl;</div><div class="line">    <span class="keyword">int</span> flo;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> &amp;i = cur[now]; i != <span class="number">-1</span>; i = nxt[i]) &#123;</div><div class="line">        <span class="keyword">if</span> (flow[i] &amp;&amp; dis[data[i]] == dis[now] + <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (flo = dfs(data[i], Min(fl, flow[i]))) &#123;</div><div class="line">                flow[i] -= flo;</div><div class="line">                flow[i ^ <span class="number">1</span>] += flo;</div><div class="line">                <span class="keyword">return</span> flo;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span></div><div class="line">&#123;</div><div class="line">    nxt[cnt] = head[x]; data[cnt] = y; flow[cnt] = z; head[x] = cnt++;</div><div class="line">    nxt[cnt] = head[y]; data[cnt] = x; flow[cnt] = <span class="number">0</span>; head[y] = cnt++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    freopen(<span class="string">"cake.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"cake.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    </div><div class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</div><div class="line">    </div><div class="line">    in(p); in(qs); in(r); in(d);</div><div class="line">    </div><div class="line">    FOR(i, <span class="number">1</span>, r) &#123;</div><div class="line">        FOR(j, <span class="number">1</span>, p) FOR(k, <span class="number">1</span>, qs) in(height[i][j][k]);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    FOR(i, <span class="number">1</span>, p) FOR(j, <span class="number">1</span>, qs) &#123;</div><div class="line">        add(ss, PLA(i, j, <span class="number">1</span>), INF);</div><div class="line">        FOR(k, <span class="number">1</span>, r) &#123;</div><div class="line">            add(PLA(i, j, k), PLA(i, j, k + <span class="number">1</span>), height[k][i][j]);</div><div class="line">        &#125;</div><div class="line">        add(PLA(i, j, r + <span class="number">1</span>), tt, INF);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    FOR(i, <span class="number">1</span>, p) FOR(j, <span class="number">1</span>, qs) &#123;</div><div class="line">        FOR(k, d + <span class="number">1</span>, r + <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (i != p) add(PLA(i, j, k), PLA(i + <span class="number">1</span>, j, k - d), INF);</div><div class="line">            <span class="keyword">if</span> (i != <span class="number">1</span>) add(PLA(i, j, k), PLA(i - <span class="number">1</span>, j, k - d), INF);</div><div class="line">            <span class="keyword">if</span> (j != qs) add(PLA(i, j, k), PLA(i, j + <span class="number">1</span>, k - d), INF);</div><div class="line">            <span class="keyword">if</span> (j != <span class="number">1</span>) add(PLA(i, j, k), PLA(i, j - <span class="number">1</span>, k - d), INF);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> fl = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (bfs()) &#123;</div><div class="line">        <span class="built_in">memcpy</span>(cur, head, <span class="keyword">sizeof</span> head);</div><div class="line">        <span class="keyword">int</span> tmp; <span class="keyword">while</span> (tmp = dfs(ss, INF)) fl += tmp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, fl);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;hnoi2013解题报告&quot;&gt;HNOI2013解题报告&lt;/h2&gt;
&lt;h4 id=&quot;author-pengyihao&quot;&gt;Author: Pengyihao&lt;/h4&gt;
    
    </summary>
    
      <category term="HNOI" scheme="http://yoursite.com/categories/HNOI/"/>
    
    
      <category term="HNOI" scheme="http://yoursite.com/tags/HNOI/"/>
    
  </entry>
  
  <entry>
    <title>HNOI2012解题报告</title>
    <link href="http://yoursite.com/2017/04/02/HNOI2012%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    <id>http://yoursite.com/2017/04/02/HNOI2012解题报告/</id>
    <published>2017-04-02T07:01:56.000Z</published>
    <updated>2017-04-02T07:39:26.365Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hnoi2012解题报告">HNOI2012解题报告</h2>
<h4 id="author-pengyihao">Author: Pengyihao</h4>
<a id="more"></a>
<hr>
<h3 id="day1-t1-双十字">Day1 T1 双十字</h3>
<hr>
<h4 id="思路">思路</h4>
<p>因为矩阵总的大小不超过 <span class="math inline">\(1000000\)</span>，所以我们可以预处理往左最多能延续多少，往右、往上、往下……</p>
<p>然后我们考虑枚举双十字中间线所在的列。</p>
<p>枚举下面这根横线所在的行。</p>
<p>然后对于这根横线形成的双十字的数量有影响的行，一定在其之上并且长度短于它。</p>
<p>于是对于每段连续的 <span class="math inline">\(1\)</span>，我们维护一个 <span class="math inline">\(splay\)</span>。</p>
<p><span class="math inline">\(splay\)</span> 的关键字键值为左右延伸的长度，然后记录每个点往上扩展的长度以及自身的长度能够给予的贡献。</p>
<p>这个贡献可以求一下子树的和。</p>
<p>那么每次计算下面这根横线的贡献的时候，直接找到它在 <span class="math inline">\(splay\)</span> 中的位置，把它左边、右边的区间提取出来，计算贡献即可。</p>
<p>注意必须在第 <span class="math inline">\(i\)</span> 行的时候插入第 <span class="math inline">\(i-2\)</span> 行，因为两根横线不相邻。</p>
<hr>
<h4 id="代码">代码</h4>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, a, b) for (LL i = (a), i##_END_ = (b); i &lt;= i##_END_; i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DNF(i, a, b) for (LL i = (a), i##_END_ = (b); i &gt;= i##_END_; i--)</span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function"><span class="keyword">void</span> <span class="title">in</span><span class="params">(Tp &amp;x)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> ch = getchar(); x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Min</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Max</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmax</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : x=y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmin</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : x=y;&#125;</div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">vector</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> LL MAXN = <span class="number">10010</span>, MOD = <span class="number">1000000009</span>;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;LL&gt;line[MAXN];</div><div class="line"><span class="built_in">vector</span>&lt;LL&gt;lr[MAXN], tp[MAXN], co[MAXN];</div><div class="line"></div><div class="line">LL r, c, n;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Node &#123;</div><div class="line">    Node *ch[<span class="number">2</span>], *fa;</div><div class="line">    LL data1, data2, sum1, sum2, sum3, sz;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(LL, LL)</span></span>;</div><div class="line">    <span class="function">LL <span class="title">get_rnk</span><span class="params">(LL)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(Node*)</span></span>;</div><div class="line">    <span class="function">Node *<span class="title">find_key</span><span class="params">(LL)</span></span>;</div><div class="line">&#125; *treap;</div><div class="line"></div><div class="line"><span class="keyword">void</span> Node::rotate()</div><div class="line">&#123;</div><div class="line">    Node *pa = fa;</div><div class="line">    fa = pa -&gt; fa; pa -&gt; fa = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">if</span> (fa != <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">bool</span> t = (fa -&gt; ch[<span class="number">0</span>] == pa ? <span class="number">0</span> : <span class="number">1</span>);</div><div class="line">        fa -&gt; ch[t] = <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">bool</span> t = (pa -&gt; ch[<span class="number">0</span>] == <span class="keyword">this</span> ? <span class="number">0</span> : <span class="number">1</span>);</div><div class="line">    Node *chd = ch[t ^ <span class="number">1</span>];</div><div class="line">    ch[t ^ <span class="number">1</span>] = pa; pa -&gt; ch[t] = chd;</div><div class="line">    <span class="keyword">if</span> (chd != <span class="literal">NULL</span>) chd -&gt; fa = pa;</div><div class="line">    pa -&gt; update(); update();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> Node::splay(Node *top)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (fa != top) &#123;</div><div class="line">        <span class="keyword">if</span> (fa -&gt; fa != top) &#123;</div><div class="line">            <span class="keyword">bool</span> t = (fa -&gt; fa -&gt; ch[<span class="number">0</span>] == fa ? <span class="number">0</span> : <span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span> (fa -&gt; ch[t] == <span class="keyword">this</span>) fa -&gt; rotate(), rotate();</div><div class="line">            <span class="keyword">else</span> rotate(), rotate();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> rotate();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (top == <span class="literal">NULL</span>) treap = <span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">LL Node::get_rnk(LL now)</div><div class="line">&#123;</div><div class="line">    Node *x = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">    LL ret = <span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (x -&gt; data1 == now) &#123;</div><div class="line">            <span class="keyword">return</span> (x -&gt; ch[<span class="number">0</span>] == <span class="literal">NULL</span> ? <span class="number">1</span> : x -&gt; ch[<span class="number">0</span>] -&gt; sz + <span class="number">1</span>) + ret;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (x -&gt; data1 &gt; now) &#123;</div><div class="line">            <span class="keyword">if</span> (x -&gt; ch[<span class="number">0</span>] == <span class="literal">NULL</span>) <span class="keyword">return</span> ret;</div><div class="line">            x = x -&gt; ch[<span class="number">0</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (x -&gt; ch[<span class="number">1</span>] == <span class="literal">NULL</span>) <span class="keyword">return</span> x -&gt; sz + ret;</div><div class="line">            ret += (x -&gt; ch[<span class="number">0</span>] == <span class="literal">NULL</span> ? <span class="number">1</span> : x -&gt; ch[<span class="number">0</span>] -&gt; sz + <span class="number">1</span>);</div><div class="line">            x = x -&gt; ch[<span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Node* Node::find_key(LL rnk)</div><div class="line">&#123;</div><div class="line">    Node *x = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">        <span class="keyword">if</span> ((x -&gt; ch[<span class="number">0</span>] == <span class="literal">NULL</span> ? <span class="number">1</span> : x -&gt; ch[<span class="number">0</span>] -&gt; sz + <span class="number">1</span>) == rnk) <span class="keyword">return</span> x;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((x -&gt; ch[<span class="number">0</span>] == <span class="literal">NULL</span> ? <span class="number">1</span> : x -&gt; ch[<span class="number">0</span>] -&gt; sz + <span class="number">1</span>) &lt; rnk) &#123;</div><div class="line">            rnk -= (x -&gt; ch[<span class="number">0</span>] == <span class="literal">NULL</span> ? <span class="number">1</span> : x -&gt; ch[<span class="number">0</span>] -&gt; sz + <span class="number">1</span>);</div><div class="line">            x = x -&gt; ch[<span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> x = x -&gt; ch[<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> Node::insert(LL now, LL now2)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (treap == <span class="literal">NULL</span>) &#123;</div><div class="line">        Node *hr = <span class="keyword">new</span> Node;</div><div class="line">        hr -&gt; ch[<span class="number">0</span>] = hr -&gt; ch[<span class="number">1</span>] = hr -&gt; fa = <span class="literal">NULL</span>;</div><div class="line">        hr -&gt; data1 = now; hr -&gt; data2 = now2; treap = hr; treap -&gt; update();</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    LL rnk = treap -&gt; get_rnk(now);</div><div class="line">    <span class="keyword">if</span> (rnk == <span class="number">0</span>) &#123;</div><div class="line">        Node *hr = <span class="keyword">new</span> Node;</div><div class="line">        hr -&gt; ch[<span class="number">0</span>] = hr -&gt; fa = <span class="literal">NULL</span>;</div><div class="line">        hr -&gt; ch[<span class="number">1</span>] = treap; hr -&gt; data1 = now; hr -&gt; data2 = now2;</div><div class="line">        treap -&gt; fa = hr; hr -&gt; update();</div><div class="line">        treap = hr;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (rnk == treap -&gt; sz) &#123;</div><div class="line">        Node *hr = <span class="keyword">new</span> Node;</div><div class="line">        hr -&gt; ch[<span class="number">1</span>] = hr -&gt; fa = <span class="literal">NULL</span>;</div><div class="line">        hr -&gt; ch[<span class="number">0</span>] = treap; hr -&gt; data1 = now; hr -&gt; data2 = now2;</div><div class="line">        treap -&gt; fa = hr; hr -&gt; update();</div><div class="line">        treap = hr; </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        Node *hr = <span class="keyword">new</span> Node;</div><div class="line">        treap -&gt; find_key(rnk) -&gt; splay(<span class="literal">NULL</span>);</div><div class="line">        treap -&gt; find_key(rnk + <span class="number">1</span>) -&gt; splay(treap);</div><div class="line">        hr -&gt; data1 = now;</div><div class="line">        hr -&gt; data2 = now2;</div><div class="line">        hr -&gt; ch[<span class="number">0</span>] = <span class="literal">NULL</span>;</div><div class="line">        hr -&gt; ch[<span class="number">1</span>] = treap -&gt; ch[<span class="number">1</span>];</div><div class="line">        hr -&gt; fa = treap; treap -&gt; ch[<span class="number">1</span>] = hr;</div><div class="line">        hr -&gt; ch[<span class="number">1</span>] -&gt; fa = hr; hr -&gt; update(); treap -&gt; update();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> Node::clear()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (ch[<span class="number">0</span>] != <span class="literal">NULL</span>) ch[<span class="number">0</span>] -&gt; clear();</div><div class="line">    <span class="keyword">if</span> (ch[<span class="number">1</span>] != <span class="literal">NULL</span>) ch[<span class="number">1</span>] -&gt; clear();</div><div class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> Node::update()</div><div class="line">&#123;</div><div class="line">    sz = <span class="number">1</span>;</div><div class="line">    sum1 = data1 * data2 % MOD;</div><div class="line">    sum2 = (data1 * (data1 + <span class="number">1</span>) / <span class="number">2</span>) * data2 % MOD;</div><div class="line">    sum3 = data2;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (ch[<span class="number">0</span>] != <span class="literal">NULL</span>) &#123;</div><div class="line">        sz += ch[<span class="number">0</span>] -&gt; sz;</div><div class="line">        sum1 = (sum1 + ch[<span class="number">0</span>] -&gt; sum1) % MOD;</div><div class="line">        sum2 = (sum2 + ch[<span class="number">0</span>] -&gt; sum2) % MOD;</div><div class="line">        sum3 = (sum3 + ch[<span class="number">0</span>] -&gt; sum3) % MOD;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (ch[<span class="number">1</span>] != <span class="literal">NULL</span>) &#123;</div><div class="line">        sz += ch[<span class="number">1</span>] -&gt; sz;</div><div class="line">        sum1 = (sum1 + ch[<span class="number">1</span>] -&gt; sum1) % MOD;</div><div class="line">        sum2 = (sum2 + ch[<span class="number">1</span>] -&gt; sum2) % MOD;</div><div class="line">        sum3 = (sum3 + ch[<span class="number">1</span>] -&gt; sum3) % MOD;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    freopen(<span class="string">"cross.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"cross.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    </div><div class="line">    in(r); in(c); in(n);</div><div class="line"></div><div class="line">    FOR(i, <span class="number">0</span>, r + <span class="number">1</span>) &#123;</div><div class="line">        lr[i].resize(c + <span class="number">2</span>);</div><div class="line">        tp[i].resize(c + <span class="number">2</span>);</div><div class="line">        co[i].resize(c + <span class="number">2</span>);</div><div class="line">        line[i].resize(c + <span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    FOR(i, <span class="number">1</span>, r) FOR(j, <span class="number">1</span>, c) line[i][j] = <span class="number">1</span>;</div><div class="line">    </div><div class="line">    FOR(i, <span class="number">1</span>, n) &#123;</div><div class="line">        LL x, y;</div><div class="line">        in(x); in(y);</div><div class="line">        line[x][y] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    FOR(i, <span class="number">1</span>, r) &#123;</div><div class="line">        FOR(j, <span class="number">1</span>, c) &#123;</div><div class="line">            <span class="keyword">if</span> (line[i][j] == <span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">if</span> (j == <span class="number">1</span> || line[i][j - <span class="number">1</span>] == <span class="number">0</span>) lr[i][j] = <span class="number">0</span>;</div><div class="line">            <span class="keyword">else</span> lr[i][j] = lr[i][j - <span class="number">1</span>] + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        DNF(j, c, <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (line[i][j] == <span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">if</span> (j == c || line[i][j + <span class="number">1</span>] == <span class="number">0</span>) lr[i][j] = <span class="number">0</span>;</div><div class="line">            <span class="keyword">else</span> chkmin(lr[i][j], lr[i][j + <span class="number">1</span>] + <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        FOR(j, <span class="number">1</span>, c) <span class="keyword">if</span> (line[i][j]) &#123;</div><div class="line">            <span class="keyword">if</span> (i == <span class="number">1</span> || !line[i - <span class="number">1</span>][j]) tp[i][j] = <span class="number">0</span>;</div><div class="line">            <span class="keyword">else</span> tp[i][j] = tp[i - <span class="number">1</span>][j] + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    DNF(i, r, <span class="number">1</span>) &#123;</div><div class="line">        FOR(j, <span class="number">1</span>, c) <span class="keyword">if</span> (line[i][j]) &#123;</div><div class="line">            <span class="keyword">if</span> (i == r || !line[i + <span class="number">1</span>][j]) co[i][j] = <span class="number">0</span>;</div><div class="line">            <span class="keyword">else</span> co[i][j] = co[i + <span class="number">1</span>][j] + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    treap = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">bool</span> is_cleared = <span class="literal">true</span>;</div><div class="line"></div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    </div><div class="line">    FOR(j, <span class="number">1</span>, c) &#123;</div><div class="line">        <span class="keyword">if</span> (!is_cleared) &#123;</div><div class="line">            treap -&gt; clear();</div><div class="line">            treap = <span class="literal">NULL</span>;</div><div class="line">            is_cleared = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        FOR(i, <span class="number">1</span>, r) &#123;</div><div class="line">            <span class="keyword">if</span> (i &gt; <span class="number">2</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (lr[i - <span class="number">2</span>][j] != <span class="number">0</span> &amp;&amp; line[i - <span class="number">1</span>][j]) &#123;</div><div class="line">                    treap -&gt; insert(lr[i - <span class="number">2</span>][j], tp[i - <span class="number">2</span>][j]);</div><div class="line">                    is_cleared = <span class="literal">false</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> (!line[i][j]) &#123;</div><div class="line">                <span class="keyword">if</span> (!is_cleared) &#123;</div><div class="line">                    treap -&gt; clear();</div><div class="line">                    treap = <span class="literal">NULL</span>;</div><div class="line">                    is_cleared = <span class="literal">true</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            LL now = lr[i][j];</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> (now &amp;&amp; treap != <span class="literal">NULL</span>) &#123;</div><div class="line">                LL rnk = treap -&gt; get_rnk(now);</div><div class="line">                <span class="keyword">if</span> (rnk != <span class="number">0</span>) &#123;</div><div class="line">                    Node *hr;</div><div class="line">                    <span class="keyword">if</span> (rnk != treap -&gt; sz) &#123;</div><div class="line">                        treap -&gt; find_key(rnk + <span class="number">1</span>) -&gt; splay(<span class="literal">NULL</span>);</div><div class="line">                        treap -&gt; find_key(rnk) -&gt; splay(treap);</div><div class="line">                        hr = treap -&gt; ch[<span class="number">0</span>];</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span> &#123;</div><div class="line">                        treap -&gt; find_key(rnk) -&gt; splay(<span class="literal">NULL</span>);</div><div class="line">                        hr = treap;</div><div class="line">                    &#125;</div><div class="line">                    LL fst = hr -&gt; sum1 * now % MOD * co[i][j] % MOD;</div><div class="line">                    LL sec = hr -&gt; sum2 * co[i][j] % MOD;</div><div class="line">                    ans = (ans + fst - sec) % MOD;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (rnk != treap -&gt; sz) &#123;</div><div class="line">                    Node *hr;</div><div class="line">                    <span class="keyword">if</span> (rnk != <span class="number">0</span>) &#123;</div><div class="line">                        treap -&gt; find_key(rnk) -&gt; splay(<span class="literal">NULL</span>);</div><div class="line">                        treap -&gt; find_key(rnk + <span class="number">1</span>) -&gt; splay(treap);</div><div class="line">                        hr = treap -&gt; ch[<span class="number">1</span>];</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span> &#123;</div><div class="line">                        treap -&gt; find_key(rnk + <span class="number">1</span>) -&gt; splay(<span class="literal">NULL</span>);</div><div class="line">                        hr = treap;</div><div class="line">                    &#125;</div><div class="line">                    LL valu =</div><div class="line">                        (now * now - now * (now + <span class="number">1</span>) / <span class="number">2</span>) * co[i][j] % MOD;</div><div class="line">                    ans = (ans + hr -&gt; sum3 * valu % MOD) % MOD;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">        </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="day1-t2-与非">Day1 T2 与非</h3>
<hr>
<h4 id="思路-1">思路</h4>
<p>首先可以发现一个性质——NAND操作可以构成所有的位运算，这个手玩一下就出来了。</p>
<p>然后对于二进制的某两位，我们发现如果对于每一个操作数，他们的这两位都相同，那么不论怎么运算最后肯定还是相同的。</p>
<p>除了这种限制之外，就没有其它限制了。</p>
<p>意思是说，如果在必定相同的两位之间连一条边，那么会形成一个个联通块。联通块与联通块之间两两对于答案的贡献是独立的。</p>
<p>联通块可以用并查集维护。</p>
<p>于是就可以答案进行数位DP辣！！</p>
<p>对于答案的第 <span class="math inline">\(i\)</span> 位，它的取值会影响一个联通块的取值。</p>
<p>我们从高到低地做，如果边界的该位上为 <span class="math inline">\(1\)</span>，那么我们取 <span class="math inline">\(0\)</span> 的话答案就要加上 <span class="math inline">\(2^p\)</span>，其中 <span class="math inline">\(p\)</span> 是尚未确定的联通块个数。</p>
<p>其余的类似。</p>
<hr>
<h4 id="代码-1">代码</h4>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, a, b) for (int i = (a), i##_END_ = (b); i &lt;= i##_END_; i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DNF(i, a, b) for (int i = (a), i##_END_ = (b); i &gt;= i##_END_; i--)</span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function"><span class="keyword">void</span> <span class="title">in</span><span class="params">(Tp &amp;x)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> ch = getchar(), f = <span class="number">1</span>; x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (ch != <span class="string">'-'</span> &amp;&amp; (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)) ch = getchar();</div><div class="line">    <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">-1</span>, ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">    x *= f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmax</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : x=y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmin</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : x=y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Max</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Min</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : y;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> LL MAXN = <span class="number">1010</span>;</div><div class="line"></div><div class="line">LL n, k, l, r, tot, A[MAXN], fa[MAXN];</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">find</span><span class="params">(LL x)</span></span></div><div class="line">&#123;</div><div class="line">    LL tmp = x, pre;</div><div class="line">    <span class="keyword">while</span> (tmp != fa[tmp]) tmp = fa[tmp];</div><div class="line">    <span class="keyword">while</span> (x != tmp) pre = fa[x], fa[x] = tmp, x = pre;</div><div class="line">    <span class="keyword">return</span> tmp;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(LL x, LL y)</span></span></div><div class="line">&#123;</div><div class="line">    LL fx = find(x), fy = find(y);</div><div class="line">    <span class="keyword">if</span> (fx != fy) fa[fx] = fy;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">query</span><span class="params">(LL x)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">    LL ret = <span class="number">0</span>, tmp = tot;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">bool</span> chose[<span class="number">100</span>];</div><div class="line">    <span class="keyword">static</span> <span class="keyword">bool</span> how_chose[<span class="number">100</span>];</div><div class="line"></div><div class="line">    <span class="built_in">memset</span>(chose, <span class="literal">false</span>, <span class="keyword">sizeof</span> chose);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (x &gt; (<span class="number">1l</span>l &lt;&lt; (k)) - <span class="number">1</span>) <span class="keyword">return</span> (<span class="number">1l</span>l &lt;&lt; tmp);</div><div class="line">    </div><div class="line">    DNF(i, k, <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (!(x &amp; (<span class="number">1l</span>l &lt;&lt; (i - <span class="number">1</span>)))) &#123;</div><div class="line">            LL fx = find(i);</div><div class="line">            <span class="keyword">if</span> (chose[fx]) &#123;</div><div class="line">                <span class="keyword">if</span> (how_chose[fx] == <span class="number">1</span>) <span class="keyword">return</span> ret;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                chose[fx] = <span class="literal">true</span>;</div><div class="line">                how_chose[fx] = <span class="number">0</span>;</div><div class="line">                tmp--;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            LL fx = find(i);</div><div class="line">            <span class="keyword">if</span> (chose[fx]) &#123;</div><div class="line">                <span class="keyword">if</span> (how_chose[fx] == <span class="number">1</span>) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    ret += (<span class="number">1l</span>l &lt;&lt; tmp);</div><div class="line">                    <span class="keyword">return</span> ret;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                chose[fx] = <span class="literal">true</span>;</div><div class="line">                how_chose[fx] = <span class="number">1</span>;</div><div class="line">                tmp--;</div><div class="line">                ret += (<span class="number">1l</span>l &lt;&lt; tmp);</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> ret + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    freopen(<span class="string">"nand.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"nand.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    </div><div class="line">    in(n); in(k); in(l); in(r);</div><div class="line"></div><div class="line">    FOR(i, <span class="number">1</span>, n) in(A[i]);</div><div class="line"></div><div class="line">    FOR(i, <span class="number">1</span>, k) fa[i] = i;</div><div class="line">    </div><div class="line">    FOR(i, <span class="number">1</span>, k) &#123;</div><div class="line">        LL tmp = (<span class="number">1l</span>l &lt;&lt; (k)) - <span class="number">1</span>;</div><div class="line">        FOR(j, <span class="number">1</span>, n) &#123;</div><div class="line">            <span class="keyword">if</span> (A[j] &amp; (<span class="number">1l</span>l &lt;&lt; (i - <span class="number">1</span>))) &#123;</div><div class="line">                tmp &amp;= A[j];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> tmp &amp;= (A[j] ^ ((<span class="number">1l</span>l &lt;&lt; k) - <span class="number">1</span>));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!(tmp &amp; (<span class="number">1l</span>l &lt;&lt; (i - <span class="number">1</span>)))) &#123;</div><div class="line">            <span class="built_in">puts</span>(<span class="string">"WA"</span>);</div><div class="line">        &#125;</div><div class="line">        FOR(j, <span class="number">1</span>, k) <span class="keyword">if</span> (j != i) &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">bool</span>(tmp &amp; (<span class="number">1l</span>l &lt;&lt; (j - <span class="number">1</span>))) == <span class="keyword">bool</span>(tmp &amp; (<span class="number">1l</span>l &lt;&lt; (i - <span class="number">1</span>))))</div><div class="line">                merge(i, j);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    FOR(i, <span class="number">1</span>, k) <span class="keyword">if</span> (fa[i] == i) tot++;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, query(r) - query(l - <span class="number">1</span>));</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="day1-t3-排队">Day1 T3 排队</h3>
<hr>
<h4 id="思路-2">思路</h4>
<p>首先放男同学，有 <span class="math inline">\(n!\)</span>。</p>
<p>然后放老师，可以放到一起或分开放，方案分别为 <span class="math inline">\(n!\times P_{n+1}^2\times P_{n+3}^m\)</span>，和 <span class="math inline">\(n!\times2(n+1)\)</span>。</p>
<p>最后放女同学。如果老师放在一起了，那么就要放一个女同学在老师中间；否则把老师看作男同学。</p>
<p>总方案为</p>
<p><span class="math display">\[n!\times(P_{n+1}^n\times P_{n+3}^m + 2(n+1)\times P_{n+2}^{m-1}\times m)\]</span></p>
<hr>
<h4 id="代码-2">代码</h4>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Max(x,y) ((x)&gt;(y)?(x):(y))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 100000000</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> bign&#123;</div><div class="line">    <span class="keyword">int</span> len;</div><div class="line">    LL s[<span class="number">10000</span>];</div><div class="line"></div><div class="line">    bign()&#123;</div><div class="line">        len=<span class="number">1</span>;</div><div class="line">        <span class="built_in">memset</span>(s,<span class="number">0</span>,<span class="keyword">sizeof</span> s); </div><div class="line">        s[<span class="number">1</span>]=<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    bign <span class="keyword">operator</span> = (<span class="keyword">const</span> LL &amp;num)&#123;</div><div class="line">        len=<span class="number">1</span>;</div><div class="line">        s[<span class="number">1</span>]=num;</div><div class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    bign <span class="keyword">operator</span> + (<span class="keyword">const</span> bign&amp;num)&#123;</div><div class="line">        bign c;c.s[<span class="number">1</span>]=<span class="number">0</span>;c.len=Max(num.len,len);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=c.len;i++)&#123;</div><div class="line">            c.s[i+<span class="number">1</span>]=(c.s[i]+s[i]+num.s[i])/MOD;</div><div class="line">            c.s[i]=(c.s[i]+s[i]+num.s[i])%MOD;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(c.s[c.len+<span class="number">1</span>])c.len++;</div><div class="line">        <span class="keyword">return</span> c;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    bign <span class="keyword">operator</span> - (<span class="keyword">const</span> bign&amp;num)&#123;</div><div class="line">        bign c;c.s[<span class="number">1</span>]=<span class="number">0</span>;c.len=len;</div><div class="line">        <span class="keyword">int</span> x=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=c.len;i++)&#123;</div><div class="line">            c.s[i]=s[i]-num.s[i]+x;</div><div class="line">            x=<span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span>(c.s[i]&lt;<span class="number">0</span>)&#123;</div><div class="line">                c.s[i]+=MOD;</div><div class="line">                x=<span class="number">-1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(!c.s[c.len]&amp;&amp;c.len&gt;<span class="number">1</span>)c.len--;</div><div class="line">        <span class="keyword">return</span> c;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    bign <span class="keyword">operator</span> * (<span class="keyword">const</span> LL&amp;num)&#123;</div><div class="line">        bign c;c.s[<span class="number">1</span>]=<span class="number">0</span>;c.len=len;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=c.len;i++)&#123;</div><div class="line">            c.s[i+<span class="number">1</span>]=(c.s[i]+s[i]*num)/MOD;</div><div class="line">            c.s[i]=(c.s[i]+s[i]*num)%MOD;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(c.s[c.len+<span class="number">1</span>])c.len++;</div><div class="line">        <span class="keyword">return</span> c; </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    bign <span class="keyword">operator</span> * (<span class="keyword">const</span> bign&amp;num)&#123;</div><div class="line">        bign c;c.s[<span class="number">1</span>]=<span class="number">0</span>;c.len=len+num.len+<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=num.len;j++)&#123;</div><div class="line">                c.s[i+j]+=(c.s[i+j<span class="number">-1</span>]+s[i]*num.s[j])/MOD;</div><div class="line">                c.s[i+j<span class="number">-1</span>]=(c.s[i+j<span class="number">-1</span>]+s[i]*num.s[j])%MOD;</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">while</span>(!c.s[c.len]&amp;&amp;c.len&gt;<span class="number">1</span>)c.len--;</div><div class="line">        <span class="keyword">return</span> c;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=len;i&gt;=<span class="number">1</span>;i--)&#123;</div><div class="line">            <span class="keyword">if</span>(i==len)<span class="built_in">printf</span>(<span class="string">"%lld"</span>,s[i]);</div><div class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%08lld"</span>,s[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">LL n,m,tmp,tmp2;</div><div class="line">bign ans1,ans2;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    freopen(<span class="string">"queue.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"queue.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    </div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;m);tmp=n+<span class="number">4</span>;tmp2=n+<span class="number">3</span>;</div><div class="line">    <span class="keyword">for</span>(LL i=<span class="number">1</span>;i&lt;=n;i++)&#123;</div><div class="line">        ans1=ans1*i;</div><div class="line">        ans2=ans2*i;</div><div class="line">    &#125;</div><div class="line">    ans1=ans1*(n+<span class="number">1</span>)*n;</div><div class="line">    <span class="keyword">for</span>(LL i=<span class="number">1</span>;i&lt;=m&amp;&amp;tmp&gt;=<span class="number">0</span>;i++)&#123;</div><div class="line">        tmp--;</div><div class="line">        ans1=ans1*tmp;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(LL i=<span class="number">1</span>;i&lt;=m<span class="number">-1</span>&amp;&amp;tmp2&gt;=<span class="number">0</span>;i++)&#123;</div><div class="line">        tmp2--;</div><div class="line">        ans2=ans2*tmp2; </div><div class="line">    &#125;</div><div class="line">    ans2=ans2*<span class="number">2</span>*m*(n+<span class="number">1</span>);</div><div class="line">    (ans1+ans2).out(); </div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="day1-t4-矿场搭建">Day1 T4 矿场搭建</h3>
<hr>
<h4 id="思路-3">思路</h4>
<p>首先双联通缩点，然后对于每个联通块，只需要每个叶子节点放一个出口就行了（不能放割点）。</p>
<p>方案个数的话乘法原理就好了。</p>
<p>注意只有一个双联通分量的情况要特判！！</p>
<hr>
<h4 id="代码-3">代码</h4>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1010</span>, MAXM = <span class="number">510</span>;</div><div class="line"> </div><div class="line"><span class="keyword">bool</span> is[MAXN];</div><div class="line"><span class="keyword">int</span> belong[MAXN];</div><div class="line"><span class="keyword">int</span> dfn[MAXN], low[MAXN], INDEX, dot[MAXN], all, sz[MAXN];</div><div class="line"><span class="keyword">int</span> n, cnt, head[MAXN], nxt[MAXM &lt;&lt; <span class="number">1</span>], data[MAXM &lt;&lt; <span class="number">1</span>], du[MAXN];</div><div class="line"> </div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function"><span class="keyword">void</span> <span class="title">in</span><span class="params">(Tp &amp;x)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> ch = getchar(); x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (ch != EOF &amp;&amp; (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)) ch = getchar();</div><div class="line">    <span class="keyword">if</span> (ch == EOF) <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Min</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : y;&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    nxt[cnt] = head[x]; data[cnt] = y; head[x] = cnt++;</div><div class="line">    nxt[cnt] = head[y]; data[cnt] = x; head[y] = cnt++;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> rot, <span class="keyword">int</span> fa)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> size = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="literal">false</span>;</div><div class="line">    dfn[now] = low[now] = ++INDEX;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[now]; i != <span class="number">-1</span>; i = nxt[i]) </div><div class="line">        <span class="keyword">if</span> (!dfn[data[i]]) &#123;</div><div class="line">            size++;</div><div class="line">            dfs(data[i], rot, now);</div><div class="line">            low[now] = Min(low[now], low[data[i]]);</div><div class="line">            <span class="keyword">if</span> (low[data[i]] &gt;= dfn[now]) flag = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (data[i] != fa) &#123;</div><div class="line">            low[now] = Min(low[now], dfn[data[i]]);</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">if</span> (flag &amp;&amp; (now != rot || size &gt;= <span class="number">2</span>)) &#123;</div><div class="line">        dot[++dot[<span class="number">0</span>]] = now;</div><div class="line">        is[now] = <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> now)</span> </span>&#123;</div><div class="line">    dfn[now] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[now]; i != <span class="number">-1</span>; i = nxt[i])</div><div class="line">        <span class="keyword">if</span> (!is[data[i]] &amp;&amp; !dfn[data[i]]) &#123;</div><div class="line">            dfs2(data[i]);</div><div class="line">            sz[all]++;</div><div class="line">            belong[data[i]] = all;</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> TTT;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    freopen(<span class="string">"mining.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"mining.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">        in(n);</div><div class="line">        <span class="keyword">int</span> dian = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">if</span> (!n) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        cnt = <span class="number">0</span>; all = <span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(du, <span class="number">0</span>, <span class="keyword">sizeof</span> du);</div><div class="line">        <span class="built_in">memset</span>(is, <span class="number">0</span>, <span class="keyword">sizeof</span> is);</div><div class="line">        <span class="built_in">memset</span>(dot, <span class="number">0</span>, <span class="keyword">sizeof</span> dot);</div><div class="line">        <span class="built_in">memset</span>(dfn, <span class="number">0</span>, <span class="keyword">sizeof</span> dfn);</div><div class="line">        <span class="built_in">memset</span>(low, <span class="number">0</span>, <span class="keyword">sizeof</span> low);</div><div class="line">        <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</div><div class="line">        <span class="built_in">memset</span>(belong, <span class="number">0</span>, <span class="keyword">sizeof</span> belong);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            <span class="keyword">int</span> s, t;</div><div class="line">            in(s); in(t); add(s, t);</div><div class="line">            dian = <span class="built_in">std</span>::max(dian, <span class="built_in">std</span>::max(s, t));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= dian; i++)</div><div class="line">            <span class="keyword">if</span> (!dfn[i]) dfs(i, i, <span class="number">-1</span>);</div><div class="line">        <span class="built_in">memset</span>(dfn, <span class="number">0</span>, <span class="keyword">sizeof</span> dfn);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= dian; i++)</div><div class="line">            <span class="keyword">if</span> (!dfn[i] &amp;&amp; !is[i]) &#123;</div><div class="line">                belong[i] = ++all;</div><div class="line">                sz[all] = <span class="number">1</span>;</div><div class="line">                dfs2(i);</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">if</span> (all == <span class="number">1</span>) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Case %d: %d %d\n"</span>, ++TTT, <span class="number">2</span>, dian * (dian - <span class="number">1</span>) / <span class="number">2</span>);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= dian; i++)</div><div class="line">            <span class="keyword">if</span> (is[i]) &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = head[i]; j != <span class="number">-1</span>; j = nxt[j])</div><div class="line">                    dfn[belong[data[j]]] = <span class="number">0</span>;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = head[i]; j != <span class="number">-1</span>; j = nxt[j])</div><div class="line">                    <span class="keyword">if</span> (!dfn[belong[data[j]]]) &#123;</div><div class="line">                        dfn[belong[data[j]]] = <span class="literal">true</span>;</div><div class="line">                        du[belong[data[j]]]++;</div><div class="line">                    &#125;</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">int</span> tot = <span class="number">0</span>;</div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> fang = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= all; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (du[i] == <span class="number">1</span>) &#123;</div><div class="line">                tot++;</div><div class="line">                <span class="keyword">if</span> (sz[i] &gt; <span class="number">1</span>)</div><div class="line">                    fang = fang * (sz[i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: %d %lld\n"</span>, ++TTT, tot, fang);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="day2-t1">Day2 T1</h3>
<p>这是一道计算几何的题目。</p>
<p>因为我还没有进行这个专题，所以我跳过了这道题目。</p>
<hr>
<h3 id="day2-t2">Day2 T2</h3>
<p>这是一道计算几何的题目。</p>
<p>因为我还没有进行这个专题，所以我跳过了这道题目。</p>
<hr>
<h3 id="day2-t3">Day2 T3</h3>
<hr>
<h4 id="思路-4">思路</h4>
<p>这个题目是一道 <span class="math inline">\(splay\)</span> 的启发式合并的模板题。</p>
<p>只需要从小的合并到大的中间就可以了。</p>
<hr>
<h4 id="代码-4">代码</h4>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, a, b) for (int i = (a), i##_END_ = (b); i &lt;= i##_END_; i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DNF(i, a, b) for (int i = (a), i##_END_ = (b); i &gt;= i##_END_; i--)</span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function"><span class="keyword">void</span> <span class="title">in</span><span class="params">(Tp &amp;x)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> ch = getchar(); x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Min</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Max</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmax</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : x=y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmin</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : x=y;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">100010</span>;</div><div class="line"></div><div class="line"><span class="keyword">char</span> command[<span class="number">10</span>];</div><div class="line"><span class="keyword">int</span> n, m, rnk[MAXN], fa[MAXN];</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Node &#123;</div><div class="line">    <span class="keyword">int</span> data, sz, id;</div><div class="line">    Node *ch[<span class="number">2</span>], *fa;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(Node*)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">()</span></span>;</div><div class="line">    <span class="function">Node *<span class="title">find_key</span><span class="params">(<span class="keyword">int</span>)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(Node*)</span></span>;</div><div class="line">&#125; *to[MAXN];</div><div class="line"></div><div class="line"><span class="keyword">void</span> Node::rotate()</div><div class="line">&#123;</div><div class="line">    Node *pa = fa;</div><div class="line">    fa = pa -&gt; fa;</div><div class="line">    <span class="keyword">if</span> (fa != <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">bool</span> t = fa -&gt; ch[<span class="number">0</span>] == pa ? <span class="number">0</span> : <span class="number">1</span>;</div><div class="line">        fa -&gt; ch[t] = <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">    pa -&gt; fa = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">bool</span> t = pa -&gt; ch[<span class="number">0</span>] == <span class="keyword">this</span> ? <span class="number">0</span> : <span class="number">1</span>;</div><div class="line">    Node *chd = ch[t ^ <span class="number">1</span>];</div><div class="line">    pa -&gt; ch[t] = chd;</div><div class="line">    <span class="keyword">if</span> (chd != <span class="literal">NULL</span>) chd -&gt; fa = pa;</div><div class="line">    ch[t ^ <span class="number">1</span>] = pa;</div><div class="line">    pa -&gt; update(); update();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> Node::splay(Node *top)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (fa != top) &#123;</div><div class="line">        <span class="keyword">if</span> (fa -&gt; fa != top) &#123;</div><div class="line">            <span class="keyword">bool</span> t = (fa -&gt; ch[<span class="number">0</span>] == <span class="keyword">this</span> ? <span class="number">0</span> : <span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span> (fa -&gt; fa -&gt; ch[t] == fa) &#123;</div><div class="line">                fa -&gt; rotate(); rotate();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> rotate(), rotate();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> rotate();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Node* Node::find_key(<span class="keyword">int</span> rnk)</div><div class="line">&#123;</div><div class="line">    Node *hr = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">        <span class="keyword">int</span> nowrnk;</div><div class="line">        nowrnk = (hr -&gt; ch[<span class="number">0</span>] == <span class="literal">NULL</span> ? <span class="number">1</span> : hr -&gt; ch[<span class="number">0</span>] -&gt; sz + <span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span> (nowrnk == rnk) <span class="keyword">return</span> hr;</div><div class="line">        <span class="keyword">if</span> (nowrnk &lt;  rnk) &#123;</div><div class="line">            rnk -= nowrnk;</div><div class="line">            hr = hr -&gt; ch[<span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> hr = hr -&gt; ch[<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> Node::update()</div><div class="line">&#123;</div><div class="line">    sz = <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (ch[<span class="number">0</span>] != <span class="literal">NULL</span>) sz += ch[<span class="number">0</span>] -&gt; sz;</div><div class="line">    <span class="keyword">if</span> (ch[<span class="number">1</span>] != <span class="literal">NULL</span>) sz += ch[<span class="number">1</span>] -&gt; sz;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> Node::insert(Node *x)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">bool</span> t;</div><div class="line">    Node *pos = <span class="keyword">this</span>, *pa = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">while</span> (pos != <span class="literal">NULL</span>) &#123;</div><div class="line">        pa = pos;</div><div class="line">        <span class="keyword">if</span> (x -&gt; data &gt; pos -&gt; data) pos = pos -&gt; ch[<span class="number">1</span>], t = <span class="number">1</span>;</div><div class="line">        <span class="keyword">else</span> pos = pos -&gt; ch[<span class="number">0</span>], t = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    x -&gt; fa = pa;</div><div class="line">    <span class="keyword">if</span> (pa != <span class="literal">NULL</span>) pa -&gt; ch[t] = x;</div><div class="line">    x -&gt; ch[<span class="number">0</span>] = x -&gt; ch[<span class="number">1</span>] = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">while</span> (x != <span class="literal">NULL</span>) &#123;</div><div class="line">        x -&gt; update();</div><div class="line">        x = x -&gt; fa;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Ins</span><span class="params">(Node* now, Node* to)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (now == <span class="literal">NULL</span>) <span class="keyword">return</span>;</div><div class="line">    Ins(now -&gt; ch[<span class="number">0</span>], to); Ins(now -&gt; ch[<span class="number">1</span>], to);</div><div class="line">    to -&gt; splay(<span class="literal">NULL</span>); to -&gt; insert(now); now -&gt; splay(<span class="literal">NULL</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> tmp = x, pre;</div><div class="line">    <span class="keyword">while</span> (tmp != fa[tmp]) tmp = fa[tmp];</div><div class="line">    <span class="keyword">while</span> (x != tmp) pre = fa[x], fa[x] = tmp, x = pre;</div><div class="line">    <span class="keyword">return</span> tmp;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> fx = find(x), fy = find(y);</div><div class="line">    <span class="keyword">return</span> fx == fy ? <span class="literal">false</span> : fa[fx] = fy, <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    freopen(<span class="string">"neverland.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"neverland.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    </div><div class="line">    in(n); in(m);</div><div class="line">    FOR(i, <span class="number">1</span>, n) fa[i] = i;</div><div class="line">    FOR(i, <span class="number">1</span>, n) in(rnk[i]);</div><div class="line">    FOR(i, <span class="number">1</span>, n) &#123;</div><div class="line">        to[i] = <span class="keyword">new</span> Node;</div><div class="line">        to[i] -&gt; data = rnk[i];</div><div class="line">        to[i] -&gt; sz = <span class="number">1</span>; to[i] -&gt; id = i;</div><div class="line">        to[i] -&gt; fa = to[i] -&gt; ch[<span class="number">0</span>] = to[i] -&gt; ch[<span class="number">1</span>] = <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">    FOR(i, <span class="number">1</span>, m) &#123;</div><div class="line">        <span class="keyword">int</span> x, y; in(x); in(y);</div><div class="line">        <span class="keyword">if</span> (merge(x, y)) &#123;</div><div class="line">            <span class="keyword">if</span> (to[x] == <span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, x);</div><div class="line">            to[x] -&gt; splay(<span class="literal">NULL</span>);</div><div class="line">            to[y] -&gt; splay(<span class="literal">NULL</span>);</div><div class="line">            <span class="keyword">if</span> (to[x] -&gt; sz &lt; to[y] -&gt; sz) &#123;</div><div class="line">                Ins(to[x], to[y]);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> Ins(to[y], to[x]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> q; in(q);</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (q--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, command);</div><div class="line">        <span class="keyword">if</span> (command[<span class="number">0</span>] == <span class="string">'Q'</span>) &#123;</div><div class="line">            <span class="keyword">int</span> x, k;</div><div class="line">            in(x); in(k);</div><div class="line">            to[x] -&gt; splay(<span class="literal">NULL</span>);</div><div class="line">            <span class="keyword">if</span> (to[x] -&gt; sz &lt; k) <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, to[x] -&gt; find_key(k) -&gt; id);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">int</span> x, y;</div><div class="line">            in(x); in(y);</div><div class="line">            <span class="keyword">if</span> (merge(x, y)) &#123;</div><div class="line">                to[x] -&gt; splay(<span class="literal">NULL</span>);</div><div class="line">                to[y] -&gt; splay(<span class="literal">NULL</span>);</div><div class="line">                <span class="keyword">if</span> (to[x] -&gt; sz &lt; to[y] -&gt; sz) &#123;</div><div class="line">                    Ins(to[x], to[y]);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> Ins(to[y], to[x]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="day2-t4-集合选数">Day2 T4 集合选数</h3>
<hr>
<h4 id="思路-5">思路</h4>
<p>考虑一张表，将 <span class="math inline">\(1\)</span> 在左下角。</p>
<p>满足一个性质：对于一个格子，它的右边的格子里的数字是它的 <span class="math inline">\(3\)</span> 倍，上面的格子里的数字是它的 <span class="math inline">\(2\)</span> 倍。</p>
<p>于是问题转化为在格子中选不相邻的数的方案数。</p>
<p>表的长宽不会很大，是 <span class="math inline">\(log\)</span> 级别的。</p>
<p>可能有很多张不相交的表。</p>
<p>状压dp就好了。</p>
<hr>
<h4 id="代码-5">代码</h4>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, a, b) for (register int i = (a), i##_END_ = (b); i &lt;= i##_END_; i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DNF(i, a, b) for (register int i = (a), i##_END_ = (b); i &gt;= i##_END_; i--)</span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function"><span class="keyword">void</span> <span class="title">in</span><span class="params">(Tp &amp;x)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> ch = getchar(); x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Min</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Max</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmax</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : x=y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmin</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : x=y;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1000000001</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">100010</span>;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> vis[MAXN];</div><div class="line"><span class="keyword">int</span> n, ans = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">18</span>][<span class="number">18</span>], end[<span class="number">18</span>], f[<span class="number">2</span>][MAXN &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> now)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line"></div><div class="line">    FOR(i, <span class="number">1</span>, <span class="number">100000</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (i == <span class="number">1</span>) <span class="built_in">map</span>[<span class="number">1</span>][i] = now;</div><div class="line">        <span class="keyword">else</span> <span class="built_in">map</span>[<span class="number">1</span>][i] = <span class="built_in">map</span>[<span class="number">1</span>][i - <span class="number">1</span>] * <span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">map</span>[<span class="number">1</span>][i] &gt; n) &#123;</div><div class="line">            <span class="comment">//map[1][i] = -1;</span></div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        vis[<span class="built_in">map</span>[<span class="number">1</span>][i]] = <span class="literal">true</span>;</div><div class="line">        FOR(j, <span class="number">2</span>, <span class="number">100000</span>) &#123;</div><div class="line">            <span class="built_in">map</span>[j][i] = <span class="built_in">map</span>[j - <span class="number">1</span>][i] * <span class="number">3</span>;</div><div class="line">            <span class="keyword">if</span> (<span class="built_in">map</span>[j][i] &gt; n) &#123;</div><div class="line">                <span class="comment">//map[j][i] = -1;</span></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            vis[<span class="built_in">map</span>[j][i]] = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    end[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">bool</span> t = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> all = <span class="number">1</span>;</div><div class="line"></div><div class="line">    f[t ^ <span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">bool</span> first = <span class="literal">true</span>;</div><div class="line">    </div><div class="line">    FOR(i, <span class="number">1</span>, <span class="number">100000</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">map</span>[i][<span class="number">1</span>] &lt;= n) &#123;</div><div class="line">            FOR(j, <span class="number">1</span>, <span class="number">100000</span>) <span class="keyword">if</span> (<span class="built_in">map</span>[i][j] &gt; n) &#123;end[i] = j - <span class="number">1</span>; <span class="keyword">break</span>;&#125;</div><div class="line">            <span class="keyword">int</span> limits1 = (<span class="number">1</span> &lt;&lt; end[i]) - <span class="number">1</span>, limits2 = (<span class="number">1</span> &lt;&lt; end[i - <span class="number">1</span>]) - <span class="number">1</span>;</div><div class="line">            FOR(j, <span class="number">0</span>, limits1) &#123;</div><div class="line">                f[t][j] = <span class="number">0</span>;</div><div class="line">                <span class="keyword">bool</span> flag = <span class="literal">true</span>;</div><div class="line">                <span class="keyword">if</span> (!first &amp;&amp; !f[t ^ <span class="number">1</span>][j]) <span class="keyword">continue</span>;</div><div class="line">                FOR(l, <span class="number">2</span>, end[i]) <span class="keyword">if</span> ((j &amp; (<span class="number">1</span> &lt;&lt; (l - <span class="number">1</span>))) &amp;&amp; (((j) &amp; (<span class="number">1</span> &lt;&lt; (l - <span class="number">2</span>))))) &#123;</div><div class="line">                    flag = <span class="literal">false</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (!flag) <span class="keyword">continue</span>;</div><div class="line">                FOR(k, <span class="number">0</span>, limits2) &#123;</div><div class="line">                    <span class="keyword">bool</span> flag = <span class="literal">true</span>;</div><div class="line">                    <span class="keyword">if</span> (!f[t ^ <span class="number">1</span>][k]) <span class="keyword">continue</span>;</div><div class="line">                    FOR(l, <span class="number">1</span>, end[i]) &#123;</div><div class="line">                        <span class="keyword">if</span> ((j &amp; (<span class="number">1</span> &lt;&lt; (l - <span class="number">1</span>))) &amp;&amp; (k &amp; (<span class="number">1</span> &lt;&lt; (l - <span class="number">1</span>)))) &#123;</div><div class="line">                            flag = <span class="literal">false</span>;</div><div class="line">                            <span class="keyword">break</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (flag) f[t][j] = (f[t][j] + f[t ^ <span class="number">1</span>][k]) % MOD;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            all = i - <span class="number">1</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        first = <span class="literal">false</span>;</div><div class="line">        t ^= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    FOR(i, <span class="number">0</span>, (<span class="number">1</span> &lt;&lt; (end[all] - <span class="number">1</span>))) ret = (ret + f[t ^ <span class="number">1</span>][i]) % MOD;</div><div class="line">    </div><div class="line">    ans = <span class="number">1l</span>l * ans * ret % MOD;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    freopen(<span class="string">"set.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"set.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    </div><div class="line">    in(n);</div><div class="line">    FOR(i, <span class="number">1</span>, n) &#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i]) solve(i);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;hnoi2012解题报告&quot;&gt;HNOI2012解题报告&lt;/h2&gt;
&lt;h4 id=&quot;author-pengyihao&quot;&gt;Author: Pengyihao&lt;/h4&gt;
    
    </summary>
    
      <category term="HNOI" scheme="http://yoursite.com/categories/HNOI/"/>
    
    
      <category term="HNOI" scheme="http://yoursite.com/tags/HNOI/"/>
    
  </entry>
  
  <entry>
    <title>test20170401总结</title>
    <link href="http://yoursite.com/2017/04/02/test20170401%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/04/02/test20170401总结/</id>
    <published>2017-04-02T06:45:42.000Z</published>
    <updated>2017-04-02T07:00:02.607Z</updated>
    
    <content type="html"><![CDATA[<h2 id="test20170401总结">test20170401总结</h2>
<p>做题顺序：T1-&gt;T3-&gt;T2</p>
<a id="more"></a>
<hr>
<h4 id="t1">T1</h4>
<p>线性基的裸题。</p>
<p>直接求出最大值的排名，然后减掉1之后计算第 <span class="math inline">\(k\)</span> 大就行了。</p>
<p>期望得分：100分。</p>
<p>实际得分：100分。</p>
<hr>
<h4 id="t2">T2</h4>
<p>不会做，没有一点思路，暴力都不会……</p>
<p>超才竟然有dp的思路，真是太强了，%%%orzorz</p>
<p>期望得分：0</p>
<p>实际得分：0分。</p>
<hr>
<h4 id="t3">T3</h4>
<p>本来也是不会的。</p>
<p>研究了一下操作发现操作可逆。双向广搜？</p>
<p>想到ZJOI上有一个神犇曾经批判过我们盲目双向广搜，然后拿到题好像是把所有状态转移到同一个样子。</p>
<p>于是我就想能不能把 <span class="math inline">\(1\)</span> 往左移。</p>
<p>手玩了几发发现不管什么情况，都可以变成左边一连串 <span class="math inline">\(1\)</span>，一个<span class="math inline">\(0\)</span>，然后一个 <span class="math inline">\(1\)</span>，后面全是 <span class="math inline">\(0\)</span>；</p>
<p>或者左边一连串 <span class="math inline">\(1\)</span>，后面全是 <span class="math inline">\(0\)</span>。</p>
<p>然后发现对于中间间隔了一个 <span class="math inline">\(0\)</span> 的情况，<span class="math inline">\(1\)</span> 可以两个两个地增加。</p>
<p>对于左边全是 <span class="math inline">\(1\)</span> 的情况，<span class="math inline">\(1\)</span> 可以三个三个地增加。</p>
<p>……</p>
<p>于是只需要对于每个状态傻逼地往左移，</p>
<p>然后对于每个状态傻逼地往右扩展。</p>
<p>最后发现只有 <span class="math inline">\(5\)</span> 种情况（包括全 <span class="math inline">\(1\)</span>，<span class="math inline">\(0\)</span>）。</p>
<p>比较类别即可。</p>
<p>upd: 当 <span class="math inline">\(n\)</span> 很小的时候，因为舞台不够大，有一些移动不合法，所以要交暴力。我在 <span class="math inline">\(n\leq 5\)</span> 的时候是暴力跑的。</p>
<p>期望得分：100</p>
<p>实际得分：100分。</p>
<hr>
<h3 id="总结">总结</h3>
<p>思路有点局限？</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;test20170401总结&quot;&gt;test20170401总结&lt;/h2&gt;
&lt;p&gt;做题顺序：T1-&amp;gt;T3-&amp;gt;T2&lt;/p&gt;
    
    </summary>
    
      <category term="TEST" scheme="http://yoursite.com/categories/TEST/"/>
    
    
      <category term="TEST" scheme="http://yoursite.com/tags/TEST/"/>
    
  </entry>
  
  <entry>
    <title>test20170331总结</title>
    <link href="http://yoursite.com/2017/04/02/test20170331%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/04/02/test20170331总结/</id>
    <published>2017-04-02T06:37:53.000Z</published>
    <updated>2017-04-02T06:43:55.828Z</updated>
    
    <content type="html"><![CDATA[<h2 id="test20170331总结">test20170331总结</h2>
<p>做题顺序：T3-&gt;T1-&gt;T2</p>
<a id="more"></a>
<hr>
<h4 id="t1">T1</h4>
<p>不会做……</p>
<p>在打完第三题之后回来推了一会儿DP，结果并推不出什么，于是就交了一个暴力。</p>
<p>期望得分：30分。</p>
<p>实际得分：30分。</p>
<hr>
<h4 id="t2">T2</h4>
<p>考场上竟然没有想到！！</p>
<p>一看到题目，看到这么多限制条件，就想不是恶心dp就是网络流。</p>
<p>结果都做不了。于是就弃疗了。因为有分数，所以暴力也打不出。</p>
<p>考完之后谢超才和邱毓淞都看出了这题的本质——多重背包+二进制分组！！！</p>
<p>看来还是基础知识不杂实……</p>
<p>期望得分：0</p>
<p>实际得分：0分。</p>
<hr>
<h4 id="t3">T3</h4>
<p>一看到题目，发现是多次询问路径期望。</p>
<p>因为期望有线性性质，可以单独考虑每条边。</p>
<p>于是可以考虑<span class="math inline">\(f_i\)</span>表示从<span class="math inline">\(i\)</span>走到<span class="math inline">\(fa[i]\)</span>的期望步数，</p>
<p><span class="math inline">\(g_i\)</span>表示从<span class="math inline">\(fa[i]\)</span>走到<span class="math inline">\(i\)</span>的期望步数。</p>
<p>这个推一下公式就发现分母都被约掉了……</p>
<p>为了防止被卡精度，于是我打了long long加倍增。</p>
<p>期望得分：100</p>
<p>实际得分：100分。</p>
<hr>
<h3 id="总结">总结</h3>
<p>基础知识不够杂实。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;test20170331总结&quot;&gt;test20170331总结&lt;/h2&gt;
&lt;p&gt;做题顺序：T3-&amp;gt;T1-&amp;gt;T2&lt;/p&gt;
    
    </summary>
    
      <category term="TEST" scheme="http://yoursite.com/categories/TEST/"/>
    
    
      <category term="TEST" scheme="http://yoursite.com/tags/TEST/"/>
    
  </entry>
  
  <entry>
    <title>杜教筛</title>
    <link href="http://yoursite.com/2017/03/31/%E6%9D%9C%E6%95%99%E7%AD%9B/"/>
    <id>http://yoursite.com/2017/03/31/杜教筛/</id>
    <published>2017-03-31T03:56:07.000Z</published>
    <updated>2017-03-31T03:57:23.830Z</updated>
    
    <content type="html"><![CDATA[<p>若</p>
<p><span class="math display">\[h(n) = \sum_{i=1}^n f(i)\]</span></p>
<p>则有</p>
<p><span class="math display">\[h(n)=\sum_ {i=1}^{n}f(i)\lfloor \frac{n}{i}\rfloor-\sum_ {i=2}^{n}h(\lfloor \frac{n}{i}\rfloor)\]</span></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;若&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[h(n) = \sum_{i=1}^n f(i)\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;则有&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[h(n)=\sum_ {i=1}^{n
    
    </summary>
    
      <category term="总结" scheme="http://yoursite.com/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="总结" scheme="http://yoursite.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>test20170330总结</title>
    <link href="http://yoursite.com/2017/03/30/test20170330%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/03/30/test20170330总结/</id>
    <published>2017-03-30T01:43:33.000Z</published>
    <updated>2017-03-30T01:51:37.742Z</updated>
    
    <content type="html"><![CDATA[<h2 id="test20170330总结">test20170330总结</h2>
<p>做题顺序：T1-&gt;T2-&gt;T3</p>
<a id="more"></a>
<hr>
<h4 id="t1">T1</h4>
<p>一开始想了很久怎么让最后一次交易后变成 <span class="math inline">\(0\)</span>。</p>
<p>后来发现竟然不要输出买进了多少！！</p>
<p>所以如果最后一次交易后不为 <span class="math inline">\(0\)</span>，那么只需要在前面某一次买进操作中暗中减少一点进货就好了。</p>
<p>不知道怎么挂掉了？</p>
<p>期望得分：100分。</p>
<p>实际得分：90分。</p>
<hr>
<h4 id="t2">T2</h4>
<p>这就是一个经典的splay维护区间的问题。</p>
<p>一下子就打完了。</p>
<p>期望得分：100分。</p>
<p>实际得分：100分。</p>
<hr>
<h4 id="t3">T3</h4>
<p>不会做～</p>
<p>想了一个贪心，就是尽量从最低位选起，选到的火柴丢到最前面去，形成一串的11111111。</p>
<p>最后如果多出来一根火柴就在最高位凑一个7。</p>
<p>应该是对的，但是有一些特殊情况没有考虑（主要是因为时间不够了）。</p>
<p>期望得分：0+分。</p>
<p>实际得分：0分。</p>
<hr>
<h3 id="总结">总结</h3>
<p>做题要仔细……</p>
<p>最后一题连小数据都没有造……</p>
<p>我发现自己已经好久没有写过对拍了，下次考试一定要认真对拍……</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;test20170330总结&quot;&gt;test20170330总结&lt;/h2&gt;
&lt;p&gt;做题顺序：T1-&amp;gt;T2-&amp;gt;T3&lt;/p&gt;
    
    </summary>
    
      <category term="TEST" scheme="http://yoursite.com/categories/TEST/"/>
    
    
      <category term="TEST" scheme="http://yoursite.com/tags/TEST/"/>
    
  </entry>
  
  <entry>
    <title>test20170328总结</title>
    <link href="http://yoursite.com/2017/03/29/test20170328%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/03/29/test20170328总结/</id>
    <published>2017-03-29T02:28:00.000Z</published>
    <updated>2017-03-29T02:28:36.728Z</updated>
    
    <content type="html"><![CDATA[<h2 id="test20170328总结">test20170328总结</h2>
<p>做题顺序：T3-&gt;T2-&gt;T1</p>
<a id="more"></a>
<hr>
<h4 id="t1">T1</h4>
<p>看到这种题目就我脑袋痛……</p>
<p>第一眼看上去，我发现这是我一直做不出的一类题——不知道怎么在线段树中，将两个小区间合并成一个大区间。</p>
<p>按照以前的（错误）思路，我写了一个自认为很优的算法。</p>
<p>可是经过严格证明后，发现这是 <span class="math inline">\(O(n^2\log n)\)</span> 的。</p>
<p>然后我就弃疗了。</p>
<p>后来做了其它题之后，我回过头来，先从两个区间的情况推起。</p>
<p>然后发现了两个区间的做法好像可以推广到 <span class="math inline">\(k\)</span> 个区间的情况。</p>
<p>我的做法是 <span class="math inline">\(O(n\log n)\)</span> 的，但是常数有点大，有 <span class="math inline">\(105\)</span>。</p>
<p>果然被卡常了。</p>
<p>期望得分：100分。</p>
<p>实际得分：70分。</p>
<p>UPD：正解好像是“类似树分治的做法”？区间上为什么有树？</p>
<hr>
<h4 id="t2">T2</h4>
<p>感觉好像有印象，记得好像要转化成图论的问题。</p>
<p>结果推了半天没推出来什么东西……</p>
<p>打了一个暴力。</p>
<p>期望得分：40分。</p>
<p>实际得分：40分。</p>
<hr>
<h4 id="t3">T3</h4>
<p>并不会做，看到部分分最多就先打这题了。</p>
<p>用简单的树形dp就可以拿60分。</p>
<p>期望得分：60分。</p>
<p>实际得分：60分。</p>
<hr>
<h3 id="总结">总结</h3>
<p>讲过的题目竟然不记得了！！！</p>
<p>看来要及时总结和反思学过的内容，保证学过的内容都能熟练掌握！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;test20170328总结&quot;&gt;test20170328总结&lt;/h2&gt;
&lt;p&gt;做题顺序：T3-&amp;gt;T2-&amp;gt;T1&lt;/p&gt;
    
    </summary>
    
      <category term="TEST" scheme="http://yoursite.com/categories/TEST/"/>
    
    
      <category term="TEST" scheme="http://yoursite.com/tags/TEST/"/>
    
  </entry>
  
  <entry>
    <title>HNOI2011解题报告</title>
    <link href="http://yoursite.com/2017/03/28/HNOI2011%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    <id>http://yoursite.com/2017/03/28/HNOI2011解题报告/</id>
    <published>2017-03-28T02:57:37.000Z</published>
    <updated>2017-03-28T03:39:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hnoi2011解题报告">HNOI2011解题报告</h2>
<h4 id="author-pengyihao">Author: Pengyihao</h4>
<a id="more"></a>
<hr>
<h3 id="day1-t1-数学作业">Day1 T1 数学作业</h3>
<hr>
<h4 id="题意">题意</h4>
<p>给出正整数 <span class="math inline">\(n\)</span>, <span class="math inline">\(m\)</span>，要求将 <span class="math inline">\(1-n\)</span> 这 <span class="math inline">\(n\)</span> 个数连接起来，问连接起来的数对 <span class="math inline">\(m\)</span> 取模的结果是多少。</p>
<p><span class="math inline">\(1\leq n\leq 10^{18}, 1\leq m\leq 10^9\)</span></p>
<h4 id="思路">思路</h4>
<p>如果连接的数的位数一样，那么可以用矩阵乘法进行优化。因为有 <span class="math display">\[nowans = lastans * 10^k + now\]</span></p>
<p>这个恒定的递推式（对于位数一样的数），所以可以分段矩阵乘法。</p>
<p>因为只有 <span class="math inline">\(lg(n)\)</span> 个位数，所以可以解决这个问题。</p>
<h4 id="代码">代码</h4>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, a, b) for (LL i = (a), i##_END_ = (b); i &lt;= i##_END_; i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, a, b) for (LL i = (a), i##_END_ = (b); i &gt;= i##_END_; i--)</span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function"><span class="keyword">void</span> <span class="title">in</span><span class="params">(Tp &amp;x)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> ch = getchar(); x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Min</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Max</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmax</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : x=y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmin</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : x=y;&#125;</div><div class="line"></div><div class="line">LL n; LL m;</div><div class="line"></div><div class="line">LL ten[<span class="number">20</span>];</div><div class="line">LL tmpans;</div><div class="line"></div><div class="line">LL ret[<span class="number">4</span>][<span class="number">4</span>], tmp[<span class="number">4</span>][<span class="number">4</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(LL x[<span class="number">4</span>][<span class="number">4</span>], LL y[<span class="number">4</span>][<span class="number">4</span>], LL z[<span class="number">4</span>][<span class="number">4</span>])</span></span></div><div class="line">&#123;</div><div class="line">    LL t[<span class="number">4</span>][<span class="number">4</span>];</div><div class="line">    <span class="built_in">memset</span>(t, <span class="number">0</span>, <span class="keyword">sizeof</span> t);</div><div class="line">    FOR(i, <span class="number">1</span>, <span class="number">3</span>) FOR(j, <span class="number">1</span>, <span class="number">3</span>) FOR(k, <span class="number">1</span>, <span class="number">3</span>)</div><div class="line">        t[i][j] = (t[i][j] + <span class="number">1l</span>l * x[i][k] * y[k][j] % m) % m;</div><div class="line">    <span class="built_in">memcpy</span>(z, t, <span class="keyword">sizeof</span> t);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">work</span><span class="params">(LL x)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">bool</span> flagend = <span class="literal">false</span>;</div><div class="line">    LL ci = ten[x] - ten[x - <span class="number">1</span>], fr = ten[x - <span class="number">1</span>] % m;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (n &lt; ten[x]) &#123;</div><div class="line">        ci = n - ten[x - <span class="number">1</span>] + <span class="number">1</span>;</div><div class="line">        flagend = <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">memset</span>(ret, <span class="number">0</span>, <span class="keyword">sizeof</span> ret);</div><div class="line">    FOR(i, <span class="number">1</span>, <span class="number">3</span>) ret[i][i] = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="built_in">memset</span>(tmp, <span class="number">0</span>, <span class="keyword">sizeof</span> tmp);</div><div class="line">    tmp[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>; tmp[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>; tmp[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">1</span>;</div><div class="line">    tmp[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">1</span>; tmp[<span class="number">3</span>][<span class="number">3</span>] = ten[x] % m;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (ci) &#123;</div><div class="line">        <span class="keyword">if</span> (ci &amp; <span class="number">1</span>) mul(ret, tmp, ret);</div><div class="line">        mul(tmp, tmp, tmp);</div><div class="line">        ci &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    tmpans = (</div><div class="line">        <span class="number">1l</span>l * ret[<span class="number">1</span>][<span class="number">3</span>] % m +</div><div class="line">        <span class="number">1l</span>l * fr * ret[<span class="number">2</span>][<span class="number">3</span>] % m +</div><div class="line">        <span class="number">1l</span>l * tmpans * ret[<span class="number">3</span>][<span class="number">3</span>] % m</div><div class="line">    ) % m;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (flagend) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, tmpans);</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    freopen(<span class="string">"homework.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"homework.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    </div><div class="line">    in(n); in(m);</div><div class="line">    ten[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    FOR(i, <span class="number">1</span>, <span class="number">18</span>) ten[i] = ten[i - <span class="number">1</span>] * <span class="number">10</span>;</div><div class="line">    </div><div class="line">    FOR(i, <span class="number">1</span>, <span class="number">18</span>) <span class="keyword">if</span> (work(i)) <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="day1-t2-勾股定理">Day1 T2 勾股定理</h3>
<hr>
<p>这个题目有点问题，我在网上看题解的时候，发现这题的做法其实是不靠谱的，意思是说这是一道玄学的题目。</p>
<p>对于题目所给的数据范围，标程不一定都能在合理的时间内跑出答案。</p>
<p>所以我就跳过了这道题目。</p>
<hr>
<h3 id="day1-t3-赛车游戏">Day1 T3 赛车游戏</h3>
<hr>
<h4 id="思路-1">思路</h4>
<p>首先可以用拉格朗日乘数法证明，如果要达到最优成绩，那么每条路上的速度要尽可能相等。</p>
<p>于是就可以二分这个速度，然后计算耗油量。</p>
<p>注意如果某条路上耗油量为负数，那么就不能在这条路上用当前二分的速度来计算，因为可能耗油量为负数。</p>
<p>所以我们可以把这条路上的速度设置为令耗油量为0的速度。</p>
<p>这样就可以正确地计算耗油量和跑的时间了。</p>
<h4 id="代码-1">代码</h4>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, a, b) for (int i = (a), i##_END_ = (b); i &lt;= i##_END_; i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DNF(i, a, b) for (int i = (a), i##_END_ = (b); i &gt;= i##_END_; i--)</span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function"><span class="keyword">void</span> <span class="title">in</span><span class="params">(Tp &amp;x)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> ch = getchar(); x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Min</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Max</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmax</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : x=y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmin</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : x=y;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">10010</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> T, n;</div><div class="line"><span class="keyword">double</span> a, b, vmax, f;</div><div class="line"><span class="keyword">double</span> s[MAXN], k[MAXN], sv[MAXN];</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> LIMITS = <span class="number">1000</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">check</span><span class="params">(<span class="keyword">double</span> _v)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">double</span> sum = <span class="number">0</span>;</div><div class="line">        </div><div class="line">    FOR(i, <span class="number">1</span>, n) &#123;</div><div class="line">        <span class="keyword">if</span> (_v &lt; sv[i]) &#123;</div><div class="line">            sum = sum + Max(<span class="number">0.</span>, a * sv[i] + b * k[i]) * s[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> sum = sum + Max(<span class="number">0.</span>, a * _v + b * k[i]) * s[i];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> sum;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    freopen(<span class="string">"race.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"race.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    </div><div class="line">    in(T);</div><div class="line">    </div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf%lf"</span>, &amp;a, &amp;b, &amp;vmax, &amp;f);</div><div class="line"></div><div class="line">        in(n);</div><div class="line">        FOR(i, <span class="number">1</span>, n) &#123;</div><div class="line">            <span class="keyword">double</span> x, y;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>, &amp;x, &amp;y);</div><div class="line">            x /= <span class="number">1000.0</span>; y /= <span class="number">1000.0</span>;</div><div class="line">            </div><div class="line">            s[i] = <span class="built_in">sqrt</span>(x * x + y * y);</div><div class="line">            k[i] = y / x;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (k[i] &lt; <span class="number">0</span>) sv[i] = Min(-b * k[i] / a, vmax);</div><div class="line">            <span class="keyword">else</span> sv[i] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">double</span> l = <span class="number">0</span>, r = <span class="number">1000000000</span>;</div><div class="line">        </div><div class="line">        FOR(i, <span class="number">1</span>, LIMITS) &#123;</div><div class="line">            <span class="keyword">double</span> mid = (l + r) / <span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span> (mid &gt; vmax || check(mid) &gt; f) r = mid;</div><div class="line">            <span class="keyword">else</span> l = mid;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (check(l) &gt; f) <span class="built_in">puts</span>(<span class="string">"IMPOSSIBLE"</span>);</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">double</span> ret = <span class="number">0</span>;</div><div class="line">            </div><div class="line">            FOR(i, <span class="number">1</span>, n) &#123;</div><div class="line">                <span class="keyword">if</span> (sv[i] &gt; l) ret += s[i] / sv[i];</div><div class="line">                <span class="keyword">else</span> ret += s[i] / l;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%.5lf\n"</span>, ret);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="day1-t4-括号修复">Day1 T4 括号修复</h3>
<hr>
<h4 id="思路-2">思路</h4>
<p>首先对于一个括号序列，如何计算它最少需要改多少个括号呢？</p>
<p>我们发现如果把可以匹配的括号一层一层去掉，那么最后一定会变成下面这个样子：</p>
<p>))))))))(((((((((</p>
<p>就是左边一连串的括号，右边一连串的括号。</p>
<p>假设左边有 <span class="math inline">\(l\)</span> 个括号，右边有 <span class="math inline">\(r\)</span> 个括号。</p>
<p>那么一共要改</p>
<p><span class="math display">\[\lfloor \frac{l+1}{2}\rfloor + \lfloor\frac{r+1}{2}\rfloor\]</span></p>
<p>个括号。</p>
<p>根据“维修数列”这一题的经验，我们可以用splay来维护括号序列。</p>
<p>用+1表示’(‘，用-1表示’)’，那么左边的括号数量就是从左开始的最小子段和，右边的括号数量就是从右开始的最大子段和。</p>
<p>操作1：直接打标记。</p>
<p>操作2：直接打标记。</p>
<p>操作3：变换一下从左开始的最小、最大子段和，从右开始的最小、最大子段和。</p>
<p>操作4：直接取值。</p>
<p>怎么合并标记呢？</p>
<p>当打区间赋值标记的时候，可以直接清空反转标记。</p>
<p>当打反转标记的时候，要将赋值标记乘上-1。</p>
<h4 id="代码-2">代码</h4>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, a, b) for (int i = (a), i##_END_ = (b); i &lt;= i##_END_; i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DNF(i, a, b) for (int i = (a), i##_END_ = (b); i &gt;= i##_END_; i--)</span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function"><span class="keyword">void</span> <span class="title">in</span><span class="params">(Tp &amp;x)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> ch = getchar(); x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Min</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Max</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmax</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : x=y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmin</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : x=y;&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(Tp &amp;x, Tp &amp;y)</span> </span>&#123;Tp z = x; x = y; y = z;&#125;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Node &#123;</div><div class="line">    <span class="keyword">bool</span> isa, ist_dn, isset;</div><div class="line">    </div><div class="line">    Node *ch[<span class="number">2</span>], *fa;</div><div class="line">    <span class="keyword">int</span> lmax, lmin, rmax, rmin, data, sum, sz, wt_set;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(Node*)</span></span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">100010</span>;</div><div class="line"></div><div class="line">Node *nul, *rot, *to[MAXN];</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">char</span> str[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(Node *hr, Node *top)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (hr != nul) push(hr -&gt; fa, top);</div><div class="line">    <span class="keyword">if</span> (hr != nul) hr -&gt; pushdown();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> Node::splay(Node *top)</div><div class="line">&#123;</div><div class="line">    push(<span class="keyword">this</span>, nul);</div><div class="line">    <span class="keyword">if</span> (ch[<span class="number">0</span>] != nul) ch[<span class="number">0</span>] -&gt; pushdown();</div><div class="line">    <span class="keyword">if</span> (ch[<span class="number">1</span>] != nul) ch[<span class="number">1</span>] -&gt; pushdown();</div><div class="line">    <span class="keyword">while</span> (fa != top) &#123;</div><div class="line">        <span class="keyword">if</span> (fa -&gt; fa != top) &#123;</div><div class="line">            <span class="keyword">bool</span> t = (fa -&gt; fa -&gt; ch[<span class="number">0</span>] == fa ? <span class="number">0</span> : <span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span> (fa -&gt; ch[t] == <span class="keyword">this</span>) &#123;</div><div class="line">                fa -&gt; rotate(); rotate();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> rotate(), rotate();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> rotate();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (top == nul) rot = <span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> Node::rotate()</div><div class="line">&#123;</div><div class="line">    Node *pa = fa;</div><div class="line">    fa = pa -&gt; fa;</div><div class="line">    <span class="keyword">if</span> (fa != nul) &#123;</div><div class="line">        <span class="keyword">bool</span> t = (fa -&gt; ch[<span class="number">0</span>] == pa ? <span class="number">0</span> : <span class="number">1</span>);</div><div class="line">        fa -&gt; ch[t] = <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    pa -&gt; fa = <span class="keyword">this</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">bool</span> t = (pa -&gt; ch[<span class="number">0</span>] == <span class="keyword">this</span> ? <span class="number">0</span> : <span class="number">1</span>);</div><div class="line">    </div><div class="line">    pa -&gt; ch[t] = ch[t ^ <span class="number">1</span>];</div><div class="line">    <span class="keyword">if</span> (ch[t ^ <span class="number">1</span>] != nul) ch[t ^ <span class="number">1</span>] -&gt; fa = pa;</div><div class="line"></div><div class="line">    ch[t ^ <span class="number">1</span>] = pa;</div><div class="line"></div><div class="line">    pa -&gt; update(); update();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> Node::update()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (ch[<span class="number">0</span>] != nul) ch[<span class="number">0</span>] -&gt; pushdown();</div><div class="line">    <span class="keyword">if</span> (ch[<span class="number">1</span>] != nul) ch[<span class="number">1</span>] -&gt; pushdown();</div><div class="line">    </div><div class="line">    sum = data; sz = <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (ch[<span class="number">0</span>] != nul) sum += ch[<span class="number">0</span>] -&gt; sum, sz += ch[<span class="number">0</span>] -&gt; sz;</div><div class="line">    <span class="keyword">if</span> (ch[<span class="number">1</span>] != nul) sum += ch[<span class="number">1</span>] -&gt; sum, sz += ch[<span class="number">1</span>] -&gt; sz;</div><div class="line"></div><div class="line">    lmin = Min(<span class="number">0</span>, Min(ch[<span class="number">0</span>] -&gt; lmin, ch[<span class="number">0</span>] -&gt; sum + data + ch[<span class="number">1</span>] -&gt; lmin));</div><div class="line">    rmin = Min(<span class="number">0</span>, Min(ch[<span class="number">1</span>] -&gt; rmin, ch[<span class="number">1</span>] -&gt; sum + data + ch[<span class="number">0</span>] -&gt; rmin));</div><div class="line">    </div><div class="line">    lmax = Max(<span class="number">0</span>, Max(ch[<span class="number">0</span>] -&gt; lmax, ch[<span class="number">0</span>] -&gt; sum + data + ch[<span class="number">1</span>] -&gt; lmax));</div><div class="line">    rmax = Max(<span class="number">0</span>, Max(ch[<span class="number">1</span>] -&gt; rmax, ch[<span class="number">1</span>] -&gt; sum + data + ch[<span class="number">0</span>] -&gt; rmax));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> Node::pushdown()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (ist_dn) &#123;</div><div class="line">        ist_dn = <span class="literal">false</span>;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> tlmin = lmin, trmin = rmin;</div><div class="line">        <span class="keyword">int</span> tlmax = lmax, trmax = rmax;</div><div class="line"></div><div class="line">        data = -data; sum = -sum;</div><div class="line"> </div><div class="line">        lmin = -tlmax; lmax = -tlmin;</div><div class="line">        rmax = -trmin; rmin = -trmax;</div><div class="line"></div><div class="line">        wt_set = -wt_set;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (ch[<span class="number">0</span>] != nul) &#123;</div><div class="line">            ch[<span class="number">0</span>] -&gt; ist_dn ^= <span class="number">1</span>;</div><div class="line"><span class="comment">//            if (ch[0] -&gt; isset)</span></div><div class="line"><span class="comment">//                ch[0] -&gt; wt_set = -ch[0] -&gt; wt_set;</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (ch[<span class="number">1</span>] != nul) &#123;</div><div class="line">            ch[<span class="number">1</span>] -&gt; ist_dn ^= <span class="number">1</span>;</div><div class="line"><span class="comment">//            if (ch[1] -&gt; isset)</span></div><div class="line"><span class="comment">//                ch[1] -&gt; wt_set = -ch[1] -&gt; wt_set;</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (isset) &#123;</div><div class="line">        isset = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">if</span> (ch[<span class="number">0</span>] != nul)</div><div class="line">            ch[<span class="number">0</span>] -&gt; isset = <span class="literal">true</span>, ch[<span class="number">0</span>] -&gt; wt_set = wt_set, ch[<span class="number">0</span>] -&gt; ist_dn = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">if</span> (ch[<span class="number">1</span>] != nul)</div><div class="line">            ch[<span class="number">1</span>] -&gt; isset = <span class="literal">true</span>, ch[<span class="number">1</span>] -&gt; wt_set = wt_set, ch[<span class="number">1</span>] -&gt; ist_dn = <span class="literal">false</span>;</div><div class="line">        </div><div class="line">        data = wt_set; sum = wt_set * sz;</div><div class="line">        lmin = rmin = wt_set &lt; <span class="number">0</span> ? wt_set * sz : <span class="number">0</span>;</div><div class="line">        lmax = rmax = wt_set &gt; <span class="number">0</span> ? wt_set * sz : <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (isa) &#123;</div><div class="line">        isa = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">if</span> (ch[<span class="number">0</span>] != nul) ch[<span class="number">0</span>] -&gt; isa ^= <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (ch[<span class="number">1</span>] != nul) ch[<span class="number">1</span>] -&gt; isa ^= <span class="number">1</span>;</div><div class="line"></div><div class="line">        swap(lmin, rmin);</div><div class="line">        swap(lmax, rmax);</div><div class="line"></div><div class="line">        swap(ch[<span class="number">0</span>], ch[<span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    nul = <span class="keyword">new</span> Node;</div><div class="line"></div><div class="line">    nul -&gt; sz = <span class="number">0</span>;</div><div class="line">    nul -&gt; data = nul -&gt; sum = <span class="number">0</span>;</div><div class="line">    nul -&gt; isa = nul -&gt; ist_dn = nul -&gt; isset = <span class="literal">false</span>;</div><div class="line">    </div><div class="line">    nul -&gt; ch[<span class="number">0</span>] = nul -&gt; ch[<span class="number">1</span>] = nul -&gt; fa = nul;</div><div class="line">    </div><div class="line">    nul -&gt; lmax = nul -&gt; rmax = <span class="number">0</span>;</div><div class="line">    nul -&gt; lmin = nul -&gt; rmin = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> now)</span></span></div><div class="line">&#123;</div><div class="line">    to[now] = <span class="keyword">new</span> Node;</div><div class="line">    <span class="keyword">if</span> (now == <span class="number">1</span>) rot = to[now];</div><div class="line"></div><div class="line">    to[now] -&gt; sz = <span class="number">1</span>;</div><div class="line">    to[now] -&gt; isa = to[now] -&gt; isset = to[now] -&gt; ist_dn = <span class="literal">false</span>;</div><div class="line">    </div><div class="line">    to[now] -&gt; ch[<span class="number">0</span>] = to[now] -&gt; ch[<span class="number">1</span>] = to[now] -&gt; fa = nul;</div><div class="line">    <span class="keyword">if</span> (now != <span class="number">1</span>) to[now] -&gt; fa = to[now - <span class="number">1</span>], to[now - <span class="number">1</span>] -&gt; ch[<span class="number">1</span>] = to[now];</div><div class="line"></div><div class="line">    to[now] -&gt; data = (str[now] == <span class="string">'('</span> ? <span class="number">1</span> : <span class="number">-1</span>);</div><div class="line">    to[now] -&gt; sum = to[now] -&gt; data;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Node *<span class="title">find_key</span><span class="params">(<span class="keyword">int</span> rnk)</span></span></div><div class="line">&#123;</div><div class="line">    Node *x = rot;</div><div class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</div><div class="line">        x -&gt; pushdown();</div><div class="line">        <span class="keyword">int</span> rrnk = (x -&gt; ch[<span class="number">0</span>] == nul ? <span class="number">1</span> : x -&gt; ch[<span class="number">0</span>] -&gt; sz + <span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span> (rrnk == rnk)</div><div class="line">            <span class="keyword">return</span> x;</div><div class="line">        <span class="keyword">if</span> (rrnk &gt;  rnk)</div><div class="line">            x = x -&gt; ch[<span class="number">0</span>];</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            x = x -&gt; ch[<span class="number">1</span>];</div><div class="line">            rnk -= rrnk;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">char</span> command[<span class="number">20</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    freopen(<span class="string">"brackets.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"brackets.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    </div><div class="line">    in(n); in(m);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str + <span class="number">1</span>);</div><div class="line"></div><div class="line">    start();</div><div class="line">    </div><div class="line">    FOR(i, <span class="number">1</span>, n) insert(i);</div><div class="line"></div><div class="line">    DNF(i, n, <span class="number">1</span>) to[i] -&gt; update();</div><div class="line"></div><div class="line">    FOR(i, <span class="number">1</span>, m) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, command);</div><div class="line">        <span class="keyword">if</span> (command[<span class="number">0</span>] == <span class="string">'R'</span>) &#123;</div><div class="line">            <span class="keyword">int</span> x, y;</div><div class="line">            in(x); in(y);</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, command);</div><div class="line">            Node *hr;</div><div class="line">            <span class="keyword">if</span> (x == <span class="number">1</span> &amp;&amp; y == n) hr = rot;</div><div class="line">            <span class="keyword">if</span> (x == <span class="number">1</span> &amp;&amp; y != n) &#123;</div><div class="line">                find_key(y + <span class="number">1</span>) -&gt; splay(nul);</div><div class="line">                hr = rot -&gt; ch[<span class="number">0</span>];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (x != <span class="number">1</span> &amp;&amp; y == n) &#123;</div><div class="line">                find_key(x - <span class="number">1</span>) -&gt; splay(nul);</div><div class="line">                hr = rot -&gt; ch[<span class="number">1</span>];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (x != <span class="number">1</span> &amp;&amp; y != n) &#123;</div><div class="line">                find_key(x - <span class="number">1</span>) -&gt; splay(nul);</div><div class="line">                find_key(y + <span class="number">1</span>) -&gt; splay(rot);</div><div class="line">                hr = find_key(y + <span class="number">1</span>) -&gt; ch[<span class="number">0</span>];</div><div class="line">            &#125;</div><div class="line">            hr -&gt; pushdown();</div><div class="line">            hr -&gt; ist_dn = <span class="literal">false</span>; hr -&gt; isset = <span class="literal">true</span>;</div><div class="line">            hr -&gt; wt_set = (command[<span class="number">0</span>] == <span class="string">'('</span> ? <span class="number">1</span> : <span class="number">-1</span>);</div><div class="line">            hr -&gt; pushdown();</div><div class="line">            <span class="keyword">while</span> (hr -&gt; fa != nul) &#123;</div><div class="line">                hr = hr -&gt; fa;</div><div class="line">                hr -&gt; update();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (command[<span class="number">0</span>] == <span class="string">'Q'</span>) &#123;</div><div class="line">            <span class="keyword">int</span> x, y;</div><div class="line">            in(x); in(y);</div><div class="line">            Node *hr;</div><div class="line">            <span class="keyword">if</span> (x == <span class="number">1</span> &amp;&amp; y == n) hr = rot;</div><div class="line">            <span class="keyword">if</span> (x == <span class="number">1</span> &amp;&amp; y != n) &#123;</div><div class="line">                find_key(y + <span class="number">1</span>) -&gt; splay(nul);</div><div class="line">                hr = rot -&gt; ch[<span class="number">0</span>];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (x != <span class="number">1</span> &amp;&amp; y == n) &#123;</div><div class="line">                find_key(x - <span class="number">1</span>) -&gt; splay(nul);</div><div class="line">                hr = rot -&gt; ch[<span class="number">1</span>];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (x != <span class="number">1</span> &amp;&amp; y != n) &#123;</div><div class="line">                find_key(x - <span class="number">1</span>) -&gt; splay(nul);</div><div class="line">                find_key(y + <span class="number">1</span>) -&gt; splay(rot);</div><div class="line">                hr = find_key(y + <span class="number">1</span>) -&gt; ch[<span class="number">0</span>];</div><div class="line">            &#125;</div><div class="line">            hr -&gt; pushdown();</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (-(hr -&gt; lmin) + <span class="number">1</span>) / <span class="number">2</span> + (hr -&gt; rmax + <span class="number">1</span>) / <span class="number">2</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (command[<span class="number">0</span>] == <span class="string">'S'</span>) &#123;</div><div class="line">            <span class="keyword">int</span> x, y;</div><div class="line">            in(x); in(y);</div><div class="line">            Node *hr;</div><div class="line">            <span class="keyword">if</span> (x == <span class="number">1</span> &amp;&amp; y == n) hr = rot;</div><div class="line">            <span class="keyword">if</span> (x == <span class="number">1</span> &amp;&amp; y != n) &#123;</div><div class="line">                find_key(y + <span class="number">1</span>) -&gt; splay(nul);</div><div class="line">                hr = rot -&gt; ch[<span class="number">0</span>];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (x != <span class="number">1</span> &amp;&amp; y == n) &#123;</div><div class="line">                find_key(x - <span class="number">1</span>) -&gt; splay(nul);</div><div class="line">                hr = rot -&gt; ch[<span class="number">1</span>];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (x != <span class="number">1</span> &amp;&amp; y != n) &#123;</div><div class="line">                find_key(x - <span class="number">1</span>) -&gt; splay(nul);</div><div class="line">                find_key(y + <span class="number">1</span>) -&gt; splay(rot);</div><div class="line">                hr = find_key(y + <span class="number">1</span>) -&gt; ch[<span class="number">0</span>];</div><div class="line">            &#125;</div><div class="line">            hr -&gt; isa ^= <span class="number">1</span>;</div><div class="line">            hr -&gt; pushdown();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (command[<span class="number">0</span>] == <span class="string">'I'</span>) &#123;</div><div class="line">            <span class="keyword">int</span> x, y;</div><div class="line">            in(x); in(y);</div><div class="line">            Node *hr;</div><div class="line">            <span class="keyword">if</span> (x == <span class="number">1</span> &amp;&amp; y == n) hr = rot;</div><div class="line">            <span class="keyword">if</span> (x == <span class="number">1</span> &amp;&amp; y != n) &#123;</div><div class="line">                find_key(y + <span class="number">1</span>) -&gt; splay(nul);</div><div class="line">                hr = rot -&gt; ch[<span class="number">0</span>];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (x != <span class="number">1</span> &amp;&amp; y == n) &#123;</div><div class="line">                find_key(x - <span class="number">1</span>) -&gt; splay(nul);</div><div class="line">                hr = rot -&gt; ch[<span class="number">1</span>];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (x != <span class="number">1</span> &amp;&amp; y != n) &#123;</div><div class="line">                find_key(x - <span class="number">1</span>) -&gt; splay(nul);</div><div class="line">                find_key(y + <span class="number">1</span>) -&gt; splay(rot);</div><div class="line">                hr = find_key(y + <span class="number">1</span>) -&gt; ch[<span class="number">0</span>];</div><div class="line">            &#125;</div><div class="line">            hr -&gt; ist_dn ^= <span class="number">1</span>;</div><div class="line">            hr -&gt; pushdown();</div><div class="line">            <span class="keyword">while</span> (hr -&gt; fa != nul) &#123;</div><div class="line">                hr = hr -&gt; fa;</div><div class="line">                hr -&gt; update();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="day2-t1-任务调度">Day2 T1 任务调度</h3>
<hr>
<p>这是一道随机出答案的题目，所以我没有做，直接跳过了。</p>
<hr>
<h3 id="day2-t2-xor和路径">Day2 T2 XOR和路径</h3>
<hr>
<h4 id="思路-3">思路</h4>
<p>这是一个简单的概率DP。</p>
<p>因为是XOR，所以我们可以逐位求出期望。</p>
<p>假设当前在处理第 <span class="math inline">\(k\)</span> 位，设 <span class="math inline">\(f[i]\)</span> 表示从 <span class="math inline">\(i\)</span> 到 <span class="math inline">\(n\)</span> 异或值为 <span class="math inline">\(1\)</span> 的概率。</p>
<p>则对于 <span class="math inline">\(i\)</span> 的一个连出去的边所指向的节点 <span class="math inline">\(j\)</span>，如果边权为 <span class="math inline">\(1\)</span>，则对 <span class="math inline">\(f[i]\)</span> 的贡献为</p>
<p><span class="math display">\[\frac{1-f[j]}{deg[i]}\]</span></p>
<p>如果边权为 <span class="math inline">\(0\)</span>，则对 <span class="math inline">\(f[i]\)</span> 的贡献为</p>
<p><span class="math display">\[\frac{f[j]}{deg[i]}\]</span></p>
<p>最后别忘了 <span class="math inline">\(f[n]=0\)</span>。</p>
<h4 id="代码-3">代码</h4>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, a, b) for (int i = (a), i##_END_ = (b); i &lt;= i##_END_; i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DNF(i, a, b) for (int i = (a), i##_END_ = (b); i &gt;= i##_END_; i--)</span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function"><span class="keyword">void</span> <span class="title">in</span><span class="params">(Tp &amp;x)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> ch = getchar(); x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Min</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Max</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmax</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : x=y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmin</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : x=y;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110</span>, MAXM = <span class="number">10010</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, cnt, du[MAXN];</div><div class="line"><span class="keyword">int</span> head[MAXN], data[MAXM &lt;&lt; <span class="number">1</span>], nxt[MAXM &lt;&lt; <span class="number">1</span>], flow[MAXM &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">double</span> matrix[MAXN][MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span></div><div class="line">&#123;</div><div class="line">    nxt[cnt] = head[x]; data[cnt] = y; flow[cnt] = z; head[x] = cnt++;</div><div class="line">    <span class="keyword">if</span> (x != y) &#123;nxt[cnt] = head[y]; data[cnt] = x; flow[cnt] = z; head[y] = cnt++;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">gauss_george</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    FOR(i, <span class="number">1</span>, n) &#123;</div><div class="line">        <span class="keyword">double</span> maxv = <span class="number">-1</span>; <span class="keyword">int</span> maxq;</div><div class="line">        FOR(j, i, n) &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="built_in">fabs</span>(matrix[j][i]) &gt; maxv) &#123;</div><div class="line">                maxv = <span class="built_in">fabs</span>(matrix[j][i]);</div><div class="line">                maxq = j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="built_in">fabs</span>(matrix[maxq][i] - maxv) &gt; eps) &#123;</div><div class="line">            assert(<span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">fabs</span>(matrix[maxq][i]) &lt; eps) <span class="keyword">continue</span>;</div><div class="line">        </div><div class="line">        FOR(j, <span class="number">1</span>, n + <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">double</span> tmp = matrix[i][j];</div><div class="line">            matrix[i][j] = matrix[maxq][j];</div><div class="line">            matrix[maxq][j] = tmp;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">double</span> chu = matrix[i][i];</div><div class="line">        FOR(j, <span class="number">1</span>, n + <span class="number">1</span>) matrix[i][j] /= chu;</div><div class="line"></div><div class="line">        FOR(j, <span class="number">1</span>, n) &#123;</div><div class="line">            <span class="keyword">if</span> (j != i) &#123;</div><div class="line">                <span class="keyword">if</span> (<span class="built_in">fabs</span>(matrix[j][i]) &lt; eps) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">double</span> chu = matrix[j][i];</div><div class="line">                FOR(k, <span class="number">1</span>, n + <span class="number">1</span>)</div><div class="line">                    matrix[j][k] -= matrix[i][k] * chu;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    freopen(<span class="string">"xor.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"xor.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    </div><div class="line">    in(n); in(m);</div><div class="line"></div><div class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</div><div class="line">    </div><div class="line">    FOR(i, <span class="number">1</span>, m) &#123;</div><div class="line">        <span class="keyword">int</span> u, v, w;</div><div class="line">        in(u); in(v); in(w);</div><div class="line"></div><div class="line">        add(u, v, w);</div><div class="line">        du[v]++; <span class="keyword">if</span> (u != v) du[u]++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">double</span> ans = <span class="number">0</span>;</div><div class="line">    </div><div class="line">    FOR(i, <span class="number">1</span>, <span class="number">31</span>) &#123;</div><div class="line">        <span class="built_in">memset</span>(matrix, <span class="number">0</span>, <span class="keyword">sizeof</span> matrix);</div><div class="line">        FOR(j, <span class="number">1</span>, n - <span class="number">1</span>) &#123;</div><div class="line">            matrix[j][j] = du[j];</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = head[j]; k != <span class="number">-1</span>; k = nxt[k]) &#123;</div><div class="line">                <span class="keyword">if</span> (flow[k] &amp; (<span class="number">1</span> &lt;&lt; (i - <span class="number">1</span>))) &#123;</div><div class="line">                    matrix[j][data[k]] += <span class="number">1.0</span>;</div><div class="line">                    matrix[j][n + <span class="number">1</span>] += <span class="number">1.0</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    matrix[j][data[k]] -= <span class="number">1.0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        matrix[n][n] = <span class="number">1</span>;</div><div class="line">        gauss_george();</div><div class="line">        ans += (<span class="number">1</span> &lt;&lt; (i - <span class="number">1</span>)) * matrix[<span class="number">1</span>][n + <span class="number">1</span>] / matrix[<span class="number">1</span>][<span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%.3lf\n"</span>, ans);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="day2-t3-数矩形">Day2 T3 数矩形</h3>
<hr>
<h4 id="思路-4">思路</h4>
<p>这又是一道玄学题。</p>
<p>我们找到每条线段的中点，然后按照中点为第一关键字，线段的长度为第二关键字进行排序。</p>
<p>然后对于每个线段，暴力找前面所有跟它中点重合且长度相等的线段……</p>
<p>这样就可以过了。</p>
<h4 id="代码-4">代码</h4>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, a, b) for (int i = (a), i##_END_ = (b); i &lt;= i##_END_; i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DNF(i, a, b) for (int i = (a), i##_END_ = (b); i &gt;= i##_END_; i--)</span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function"><span class="keyword">void</span> <span class="title">in</span><span class="params">(Tp &amp;x)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> ch = getchar(), f = <span class="number">1</span>; x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (ch != <span class="string">'-'</span> &amp;&amp; (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)) ch = getchar();</div><div class="line">    <span class="keyword">if</span> (ch == <span class="string">'-'</span>) ch = getchar(), f = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">    x *= f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Min</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Max</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmax</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : x=y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmin</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : x=y;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2010</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Node &#123;</div><div class="line">    LL lenth;</div><div class="line">    <span class="keyword">int</span> posx, posy, rposx[<span class="number">2</span>], rposy[<span class="number">2</span>];</div><div class="line">&#125; pos[MAXN * MAXN];</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, cnt, x[MAXN], y[MAXN];</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">two</span><span class="params">(LL x)</span> </span>&#123;<span class="keyword">return</span> x * x;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Node &amp;x, <span class="keyword">const</span> Node &amp;y)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">bool</span> t1 = x.posx &lt; y.posx;</div><div class="line">    <span class="keyword">bool</span> t2 = x.posx == y.posx &amp;&amp; x.posy &lt; y.posy;</div><div class="line">    <span class="keyword">bool</span> t3 = x.posx == y.posx &amp;&amp; x.posy == y.posy &amp;&amp; x.lenth &lt; y.lenth;</div><div class="line">    <span class="keyword">return</span> t1 || t2 || t3;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">abs</span><span class="params">(LL x)</span> </span>&#123;<span class="keyword">return</span> x &gt; <span class="number">0</span> ? x : -x;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    freopen(<span class="string">"rectangle.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"rectangle.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    </div><div class="line">    in(n);</div><div class="line"></div><div class="line">    FOR(i, <span class="number">1</span>, n) &#123;</div><div class="line">        in(x[i]); in(y[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    FOR(i, <span class="number">1</span>, n) FOR(j, i + <span class="number">1</span>, n) &#123;</div><div class="line">        pos[++cnt].posx = x[i] + x[j], pos[cnt].posy = y[i] + y[j];</div><div class="line">        pos[cnt].lenth = two(x[i] - x[j]) + two(y[i] - y[j]);</div><div class="line">        pos[cnt].rposx[<span class="number">0</span>] = x[i]; pos[cnt].rposx[<span class="number">1</span>] = x[j];</div><div class="line">        pos[cnt].rposy[<span class="number">0</span>] = y[i]; pos[cnt].rposy[<span class="number">1</span>] = y[j];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">std</span>::sort(pos + <span class="number">1</span>, pos + cnt + <span class="number">1</span>, cmp);</div><div class="line"></div><div class="line">    LL ans = <span class="number">-1</span>;</div><div class="line">    </div><div class="line">    FOR(i, <span class="number">1</span>, cnt) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>;</div><div class="line">             j &gt;= <span class="number">1</span> &amp;&amp; pos[j].lenth == pos[i].lenth</div><div class="line">                 &amp;&amp; pos[i].posx == pos[j].posx &amp;&amp; pos[i].posy == pos[j].posy;</div><div class="line">             j--)</div><div class="line">            chkmax(ans,</div><div class="line">                   <span class="built_in">abs</span>(<span class="number">2l</span>l * pos[i].rposx[<span class="number">0</span>] * pos[j].rposy[<span class="number">0</span>] - <span class="number">2l</span>l * pos[i].rposy[<span class="number">0</span>] * pos[j].rposx[<span class="number">0</span>]</div><div class="line">                   + <span class="number">1l</span>l * pos[j].rposx[<span class="number">0</span>] * pos[i].posy - <span class="number">1l</span>l * pos[j].rposy[<span class="number">0</span>] * pos[i].posx</div><div class="line">                       + <span class="number">1l</span>l * pos[i].posx * pos[i].rposy[<span class="number">0</span>] - <span class="number">1l</span>l * pos[i].posy * pos[i].rposx[<span class="number">0</span>]));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="day2-t4-卡农">Day2 T4 卡农</h3>
<hr>
<h4 id="思路-5">思路</h4>
<p>我们可以先算出可以记片段之间顺序的方案数，因为两两不同，所以最后除以 <span class="math inline">\(m!\)</span> 就可以了。</p>
<p>设 <span class="math inline">\(f[i]\)</span> 表示前 <span class="math inline">\(i\)</span> 个片段满足题意的方案数。</p>
<p>如果前 <span class="math inline">\(i-1\)</span> 个片段已经决定了，那么第 <span class="math inline">\(i\)</span> 个片段也可以由奇偶关系决定了。</p>
<p>那么答案就为 <span class="math inline">\(P(2^n-1, i-1)\)</span> 减去不合法的方案。</p>
<p>这里的 <span class="math inline">\(P(2^n-1, i-1)\)</span> 可以递推求。</p>
<p>不合法的方案只有两种可能：</p>
<ol style="list-style-type: decimal">
<li><p>前 <span class="math inline">\(i-1\)</span> 个片段已经满足偶数要求了，那么第 <span class="math inline">\(i\)</span> 个片段必须是空集合，不符合规定。 所以要减去 <span class="math inline">\(f[i-1]\)</span>。</p></li>
<li><p>被决定出来的第 <span class="math inline">\(i\)</span> 个片段重复了。 那么与它重复的那个片段有 <span class="math inline">\(i-1\)</span> 个位置可以选择。 并且如果除了这两个片段之外，其它的片段均满足偶数条件，那么这两个片段一定相同。 而这个片段本身也有 <span class="math inline">\(2^n-1-(i-2)\)</span> 种可能。 所以要减去 <span class="math inline">\(f[i-2]\times (i-1)\times (2^n-1-(i-2))\)</span></p></li>
</ol>
<p>所以就可以直接求了。</p>
<h4 id="代码-5">代码</h4>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, a, b) for (int i = (a), i##_END_ = (b); i &lt;= i##_END_; i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DNF(i, a, b) for (int i = (a), i##_END_ = (b); i &gt;= i##_END_; i--)</span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function"><span class="keyword">void</span> <span class="title">in</span><span class="params">(Tp &amp;x)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> ch = getchar(); x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Min</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Max</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmax</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : x=y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmin</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : x=y;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">100000007</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1000010</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line">LL f[MAXN];</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">power</span><span class="params">(LL x, LL y)</span></span></div><div class="line">&#123;</div><div class="line">    LL ret = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (y) &#123;</div><div class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) ret = ret * x % MOD;</div><div class="line">        x = x * x % MOD;</div><div class="line">        y &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    freopen(<span class="string">"canon.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"canon.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    </div><div class="line">    in(n); in(m);</div><div class="line"></div><div class="line">    LL pre = <span class="number">1</span>, po = (power(<span class="number">2</span>, n) - <span class="number">1</span> + MOD) % MOD;</div><div class="line"></div><div class="line">    pre = pre * po % MOD;</div><div class="line">    po = (po - <span class="number">1</span> + MOD) % MOD;</div><div class="line"></div><div class="line">    f[<span class="number">0</span>] = <span class="number">1</span>; f[<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line"></div><div class="line">    FOR(i, <span class="number">2</span>, m) &#123;</div><div class="line">        f[i] = pre;</div><div class="line">        f[i] = (f[i] - f[i - <span class="number">1</span>] + MOD) % MOD;</div><div class="line">        f[i] = (f[i] - f[i - <span class="number">2</span>] * (i - <span class="number">1</span>) % MOD * (power(<span class="number">2</span>, n) - <span class="number">1</span> - (i - <span class="number">2</span>)) % MOD + MOD) % MOD;</div><div class="line">        pre = pre * po % MOD;</div><div class="line">        po = (po - <span class="number">1</span> + MOD) % MOD;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    LL ret = <span class="number">1</span>; FOR(i, <span class="number">1</span>, m) ret = ret * i % MOD;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, f[m] * power(ret, MOD - <span class="number">2</span>) % MOD);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;hnoi2011解题报告&quot;&gt;HNOI2011解题报告&lt;/h2&gt;
&lt;h4 id=&quot;author-pengyihao&quot;&gt;Author: Pengyihao&lt;/h4&gt;
    
    </summary>
    
      <category term="HNOI" scheme="http://yoursite.com/categories/HNOI/"/>
    
    
      <category term="HNOI" scheme="http://yoursite.com/tags/HNOI/"/>
    
  </entry>
  
  <entry>
    <title>test20170326总结</title>
    <link href="http://yoursite.com/2017/03/26/test20170326%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/03/26/test20170326总结/</id>
    <published>2017-03-26T12:20:19.000Z</published>
    <updated>2017-03-26T12:30:46.625Z</updated>
    
    <content type="html"><![CDATA[<h2 id="test20170326总结">test20170326总结</h2>
<p>做题顺序：T2-&gt;T3-&gt;T1</p>
<a id="more"></a>
<hr>
<h4 id="t1">T1</h4>
<p>这个题目很复杂，第一眼看过去就知道我做不出来。</p>
<p>因为概率题做得少，所以直接跳过了。</p>
<p>打了一个树的表，结果没得分（严重怀疑数据有问题）。</p>
<p>期望得分：10分。</p>
<p>实际得分：0分。</p>
<hr>
<h4 id="t2">T2</h4>
<p>垃圾题目，大组合数套BSGS，代码300+行。</p>
<p>结果因为一处没取模+没有手写hash用了map替代，结果被卡掉了，只有50分。</p>
<p>期望得分：100分。</p>
<p>实际得分：50分。</p>
<hr>
<h4 id="t3">T3</h4>
<p>这个题目应该是线段树加速dp。</p>
<p>考场上没有想清，打了很久，最后打挂了。</p>
<p>最后只交了暴力。</p>
<blockquote><p>线段树打两个标记不就可以$O(n\log ^2n)$了吗？</p>
<footer><strong>Xie Chaocai</strong><cite>一个神犇</cite></footer></blockquote>
<p>感觉好有道理。</p>
<p>期望得分：30分。</p>
<p>实际得分：30分。</p>
<hr>
<h3 id="总结">总结</h3>
<p>考场上太过于紧张，思路不清晰，浪费了大量的时间。</p>
<p>没有压行技巧，导致代码过长，难以调试和对拍。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;test20170326总结&quot;&gt;test20170326总结&lt;/h2&gt;
&lt;p&gt;做题顺序：T2-&amp;gt;T3-&amp;gt;T1&lt;/p&gt;
    
    </summary>
    
      <category term="TEST" scheme="http://yoursite.com/categories/TEST/"/>
    
    
      <category term="TEST" scheme="http://yoursite.com/tags/TEST/"/>
    
  </entry>
  
  <entry>
    <title>codeforces235E</title>
    <link href="http://yoursite.com/2017/03/25/codeforces235E/"/>
    <id>http://yoursite.com/2017/03/25/codeforces235E/</id>
    <published>2017-03-25T11:50:10.000Z</published>
    <updated>2017-03-30T04:30:13.561Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意">题意</h2>
<hr>
<p>求</p>
<p><span class="math display">\[\sum_{i=1}^a\sum_{j=1}^b\sum_{k=1}^cd(ijk)\]</span></p>
<p>其中，<span class="math inline">\(d(i)\)</span> 表示 <span class="math inline">\(i\)</span> 的约数个数。</p>
<p><span class="math inline">\(a, b, c\leq 2000\)</span></p>
<hr>
<a id="more"></a>
<h2 id="solution">Solution</h2>
<p>设</p>
<p><span class="math display">\[f(i)=\sum_{j=1}^a\sum_{k=1}^b[j\times k == i]\]</span></p>
<p>则</p>
\begin{align}
&amp;\sum_{i=1}^a\sum_{j=1}^b\sum_{k=1}^cd(ijk) \\
=&amp;\sum_{i=1}^{ab}f(i)\times \sum_{j=1}^cd(ij) \\
=&amp;\sum_{i=1}^{ab}f(i)\times \sum_{j=1}^c\sum_{u|i}\sum_{v|j}[(u,v)==1] \\
=&amp;\sum_{u=1}^{ab}\sum_{v=1}^c[(u,v)==1]\sum_{u|i}^{ab}\times f(i)\times \lfloor \frac{c}{v}\rfloor \\
=&amp;\sum_{u=1}^{ab}\sum_{d|u}\mu(d)\times \sum_{d|v}\lfloor \frac{c}{v}\rfloor\times \sum_{u|i}^{ab}\times f(i) \\
\end{align}
<p>然后我们发现全部都可以预处理出来！！！</p>
<p>因为这些枚举倍数的部分都是独立的，而且单单枚举倍数是可以做到<span class="math inline">\(O(n\log n)\)</span>的。</p>
<p>所以时间复杂度就为<span class="math inline">\(O(ab\log ab)\)</span>了，要卡常！</p>
<hr>
<h2 id="code">Code</h2>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, a, b) for (int i = (a), i##_END_ = (b); i &lt;= i##_END_; i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DNF(i, a, b) for (int i = (a), i##_END_ = (b); i &gt;= i##_END_; i--)</span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function"><span class="keyword">void</span> <span class="title">in</span><span class="params">(Tp &amp;x)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> ch = getchar(); x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmax</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : x=y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmin</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : x=y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Max</span><span class="params">(<span class="keyword">const</span> Tp &amp;x, <span class="keyword">const</span> Tp &amp;y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Min</span><span class="params">(<span class="keyword">const</span> Tp &amp;x, <span class="keyword">const</span> Tp &amp;y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : y;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">4000010</span>, MOD = (<span class="number">1</span> &lt;&lt; <span class="number">30</span>);</div><div class="line"></div><div class="line"><span class="keyword">int</span> a, b, c;</div><div class="line"><span class="keyword">int</span> prime[MAXN];</div><div class="line"><span class="keyword">bool</span> is_prime[MAXN];</div><div class="line"><span class="keyword">int</span> h[MAXN], f[MAXN], q[MAXN], g[MAXN], ans, miu[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_prime</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    miu[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    FOR(i, <span class="number">2</span>, a * b) &#123;</div><div class="line">        <span class="keyword">if</span> (!is_prime[i]) &#123;</div><div class="line">            prime[++prime[<span class="number">0</span>]] = i;</div><div class="line">            miu[i] = <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; prime[j] * i &lt;= i_END_; j++) &#123;</div><div class="line">            is_prime[prime[j] * i] = <span class="literal">true</span>;</div><div class="line">            <span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>) &#123;</div><div class="line">                miu[prime[j] * i] = <span class="number">0</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            miu[prime[j] * i] = -miu[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    in(a); in(b); in(c); get_prime();</div><div class="line">    FOR(i, <span class="number">1</span>, c) <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= c; j += i) h[i] = (h[i] + c / j) % MOD;</div><div class="line">    FOR(i, <span class="number">1</span>, a) FOR(j, <span class="number">1</span>, b) f[i * j]++;</div><div class="line">    FOR(i, <span class="number">1</span>, a * b) <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= i_END_; j += i)</div><div class="line">        q[i] = (q[i] + f[j]) % MOD;</div><div class="line">    FOR(i, <span class="number">1</span>, a * b) <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= i_END_; j += i)</div><div class="line">        g[j] = (g[j] + <span class="number">1l</span>l * miu[i] * h[i] % MOD) % MOD;</div><div class="line">    FOR(i, <span class="number">1</span>, a * b) g[i] = <span class="number">1l</span>l * g[i] * q[i] % MOD;</div><div class="line">    FOR(i, <span class="number">1</span>, a * b) ans = (ans + g[i]) % MOD;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题意&quot;&gt;题意&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;求&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[\sum_{i=1}^a\sum_{j=1}^b\sum_{k=1}^cd(ijk)\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;其中，&lt;span class=&quot;math inline&quot;&gt;\(d(i)\)&lt;/span&gt; 表示 &lt;span class=&quot;math inline&quot;&gt;\(i\)&lt;/span&gt; 的约数个数。&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math inline&quot;&gt;\(a, b, c\leq 2000\)&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
    
    </summary>
    
      <category term="莫比乌斯反演" scheme="http://yoursite.com/categories/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
    
    
      <category term="莫比乌斯反演" scheme="http://yoursite.com/tags/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
    
  </entry>
  
  <entry>
    <title>test20170325总结</title>
    <link href="http://yoursite.com/2017/03/25/test20170325%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/03/25/test20170325总结/</id>
    <published>2017-03-25T06:14:03.000Z</published>
    <updated>2017-03-25T07:41:50.144Z</updated>
    
    <content type="html"><![CDATA[<h2 id="test20170325总结">test20170325总结</h2>
<p>做题顺序：T1-&gt;T2-&gt;T3</p>
<a id="more"></a>
<hr>
<h4 id="t1">T1</h4>
<p>这个题目很简单，第一眼看过去就知道可以用很多方法做出来。</p>
<p>我选择了最稳的线段树套pbds，一会儿就写完了，过了对拍。</p>
<p>期望得分：100分。</p>
<p>实际得分：100分。</p>
<hr>
<h4 id="t2">T2</h4>
<p>做了很久都没有做出来，考虑各种方法都失败了。</p>
<p>最后打了一个贪心，想骗一骗分。</p>
<p>期望得分：0+</p>
<p>实际得分：10分。</p>
<p>upd: 现在还只会做第一问，把元素大小减去下标再求LIS就行了！</p>
<hr>
<h4 id="t3">T3</h4>
<p>这个题目也不会做。</p>
<p>本来想打一个spfa骗一骗分，后来发现好像可以分块。</p>
<p>可是分块打得少，直接挂掉了。</p>
<p>期望得分：0+</p>
<p>实际得分：0分。</p>
<p>upd: 正解竟然就是spfa！！！ 打一个spfa就可以水过去！！！</p>
<hr>
<h3 id="总结">总结</h3>
<p>还是思路不够灵活，学过的知识点不能熟练运用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;test20170325总结&quot;&gt;test20170325总结&lt;/h2&gt;
&lt;p&gt;做题顺序：T1-&amp;gt;T2-&amp;gt;T3&lt;/p&gt;
    
    </summary>
    
      <category term="TEST" scheme="http://yoursite.com/categories/TEST/"/>
    
    
      <category term="TEST" scheme="http://yoursite.com/tags/TEST/"/>
    
  </entry>
  
  <entry>
    <title>ZJOI考试总结</title>
    <link href="http://yoursite.com/2017/03/24/ZJOI%E6%B8%B8%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/03/24/ZJOI游记/</id>
    <published>2017-03-24T04:28:24.000Z</published>
    <updated>2017-03-30T05:27:08.963Z</updated>
    
    <content type="html"><![CDATA[<h2 id="zjoi考试总结">ZJOI考试总结</h2>
<p>浏览了一边题目，发现ZJOI的题目果然都是变态题。 觉得都只会做暴力，第一题的暴力好像有30分，第三题10~30分，第二题？？ 于是做题顺序为T1-&gt;T3-&gt;T2。</p>
<a id="more"></a>
<hr>
<h4 id="t1">T1</h4>
<p>只会做暴力和链的情况。</p>
<ol style="list-style-type: decimal">
<li>链的情况就是一个简单的DP就好了。</li>
</ol>
<p><blockquote><p>答案不就是 $2^{n-2}$ 吗？</p>
<footer><strong>Xie Chaocai</strong><cite>一个神犇</cite></footer></blockquote></p>
<p>感觉很有道理～</p>
<ol start="2" style="list-style-type: decimal">
<li>暴力的话考虑一下DFS的性质，如果一个点 <span class="math inline">\(u\)</span> 出去的返祖边到了 <span class="math inline">\(v\)</span>，那么 <span class="math inline">\(u - v\)</span> 之间是不能有其他的返祖边的起点或终点的。 标记一下就好了 。</li>
</ol>
<p>期望得分：30分。</p>
<table style="width:14%;">
<colgroup>
<col width="13%">
</colgroup>
<tbody>
<tr class="odd">
<td align="left">#### T3 这个题我没有发现题解中的那个最基本的性质…… 于是直接暴力快速幂+FFT，发现竟然连30分都拿不到！会被卡常！！ 于是只有10分走人……</td>
</tr>
<tr class="even">
<td align="left">期望得分：10分。</td>
</tr>
</tbody>
</table>
<h4 id="t2">T2</h4>
<p>这个题真是太变态了。 前面的随机出来的结果，竟然与后面随机出来的结果，一起对之后的询问有着影响。 于是只能搜索了，将所有随机结果的情况全部搜出来，然后暴力更新解就行了。</p>
<p>虚的不行，不知道有没有10分。</p>
<p>期望得分：10分。</p>
<table style="width:14%;">
<colgroup>
<col width="13%">
</colgroup>
<tbody>
<tr class="odd">
<td align="left">### 总结 还是姿势水平不够，对于性质题没有一点办法…… 计数题和概率题还是做少了题目，一碰到难题就挂掉……</td>
</tr>
</tbody>
</table>
<h4 id="某匿名神犇你zjoi崩了.">某匿名神犇：你ZJOI崩了.</h4>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;zjoi考试总结&quot;&gt;ZJOI考试总结&lt;/h2&gt;
&lt;p&gt;浏览了一边题目，发现ZJOI的题目果然都是变态题。 觉得都只会做暴力，第一题的暴力好像有30分，第三题10~30分，第二题？？ 于是做题顺序为T1-&amp;gt;T3-&amp;gt;T2。&lt;/p&gt;
    
    </summary>
    
      <category term="TEST" scheme="http://yoursite.com/categories/TEST/"/>
    
    
      <category term="TEST" scheme="http://yoursite.com/tags/TEST/"/>
    
  </entry>
  
  <entry>
    <title>Hello world</title>
    <link href="http://yoursite.com/2017/03/23/Hello-world/"/>
    <id>http://yoursite.com/2017/03/23/Hello-world/</id>
    <published>2017-03-23T15:11:03.000Z</published>
    <updated>2017-03-24T04:45:37.969Z</updated>
    
    <content type="html"><![CDATA[<p>这是第一篇博客，测试一下一些功能？</p>
<a id="more"></a>
<h1 id="title-标题">Title 标题</h1>
<h2 id="sub-title-子标题">Sub title 子标题</h2>
<h3 id="sub-sub-title-子子标题">Sub sub title 子子标题</h3>
<p><span class="math display">\[f(x)=f(x_0)+\frac{f&#39;(x_0)(x-x_0)}{1!}+\frac{f&#39;&#39;(x_0)(x-x_0)^2}{2!}+ \cdots +\frac{f^{(n-1)}(x_0)(x-x_0)^{n-1}}{(n-1)!}+\frac{f^{(n)}(\xi)(x-x_0)^n}{n!},x\in[a,b]\]</span></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, a, b) for (int i = (a), i##_END_ = (b); i &lt;= i##_END_; i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DNF(i, a, b) for (int i = (a), i##_END_ = (b); i &gt;= i##_END_; i--)</span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function"><span class="keyword">void</span> <span class="title">in</span><span class="params">(Tp &amp;x)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> ch = getchar(), f = <span class="number">1</span>; x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (ch != <span class="string">'-'</span> &amp;&amp; (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)) ch = getchar();</div><div class="line">    <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">-1</span>, ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">    x *= f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmax</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : x=y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">chkmin</span><span class="params">(Tp &amp;x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : x=y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Max</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &gt; y ? x : y;&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tp&gt; <span class="function">Tp <span class="title">Min</span><span class="params">(Tp x, Tp y)</span> </span>&#123;<span class="keyword">return</span> x &lt; y ? x : y;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是第一篇博客，测试一下一些功能？&lt;/p&gt;
    
    </summary>
    
      <category term="Hello world" scheme="http://yoursite.com/categories/Hello-world/"/>
    
    
      <category term="Hello world" scheme="http://yoursite.com/tags/Hello-world/"/>
    
  </entry>
  
</feed>
